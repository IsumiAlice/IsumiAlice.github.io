{"meta":{"title":"雀の涙","subtitle":null,"description":"裝作鹹魚的鹹魚","author":"死体","url":""},"pages":[{"title":"about me","date":"2020-06-16T15:27:43.000Z","updated":"2020-08-22T08:51:52.092Z","comments":true,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"社畜, 宅男, 站着尿尿神教教主 會許多數學的計算機碩士 圖形學, 高效能運算, 基礎數學, 機器學習 目前在深圳划水 前端知識基本為〇, 所以本部落格大部分都是照搬他人的程式碼 喜歡遊戲, 小說, 甜食, 宇宙, 美少女 最近愛上了刷馬桶和做三分鐘咖喱 夢想是和外星美少女戀愛 郵箱：isumialice@foxmail.com QQ：1261492496 部落格大事記2020-8-18 將原程式碼上傳到 source 分支由於大部分技術內容都放到 yuque 上了所以這個部落格以後就發些作品截圖和胡言亂語 2020-6-17 重新回到 Hexo + Sakura 的靜態頁面 2020-4-1 將技術相關的內容轉移到了 yuque 知識庫上：https://www.yuque.com/isumiai"},{"title":"tags","date":"2020-08-18T15:16:56.000Z","updated":"2020-08-18T15:16:59.451Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"search","date":"2020-08-18T14:44:33.551Z","updated":"2020-08-18T14:38:07.260Z","comments":false,"path":"search/index.html","permalink":"/search/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-08-18T15:17:29.000Z","updated":"2020-08-18T15:17:30.074Z","comments":true,"path":"categories/index.html","permalink":"/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Arm PL 環境配置","slug":"2020-04-19-Arm-PL","date":"2020-04-19T13:51:50.000Z","updated":"2020-08-23T05:36:11.416Z","comments":true,"path":"2020/04/19/2020-04-19-Arm-PL/","link":"","permalink":"/2020/04/19/2020-04-19-Arm-PL/","excerpt":"在 CentOS 下配置 Arm 高效能運算庫","text":"在 CentOS 下配置 Arm 高效能運算庫Arm Performance Libraries 作為 Linux 的 Arm Compiler 的一部分安裝，並且需要 Arm Allinea Studio 許可證 LicenseArm Allinea Studio 工具套件為在 Arm 硬體上開發 HPC 應用程式提供了完整的解決方案。 它包括： Arm C/C ++/Fortran 編譯器 ArmPL Arm Forge（Arm DDT，Arm MAP和Arm Performance Reports） 需要許可證來使用這些工具。 有兩種許可證， Named User 和 Floating 在獲得許可證後，按照以下說明將其新增到系統中： Add a named user license 在 /opt/arm/ 目錄中建立一個名為 licenses 的目錄 將許可證檔案複製到 /opt/arm/licenses 目錄；如果選擇將許可證檔案放在其他位置，則必須將 ARM_LICENSE_DIR 環境變數設定為指向它 export ARM_LICENSE_DIR=/opt/arm/licenses Arm Forge 和 Arm Performance Reports 在其特定的安裝目錄中搜索許可證。如果使用的是 Arm Allinea Studio 許可證，並且沒有為這些工具使用單獨的許可證，請設定 ALLINEA_LICENSE_DIR 環境變數以將這些工具指向您的 Arm Allinea Studio 許可證 export ALLINEA_LICENSE_DIR=/opt/arm/licenses &gt; named user license，無需安裝Arm License Server Setting up a floating license必須下載並安裝 Arm License Server 浮動許可證由伺服器許可證檔案和客戶端許可證檔案組成，在這裡申請 檢查客戶端許可證是否包含執行Arm License Server的計算機的主機名或IP地址 將客戶端許可證新增到安裝 Arm Allinea Studio 的計算機上。在 /opt/arm 目錄中建立一個名為 licenses 的目錄 同 named 同 named 將伺服器許可證檔案新增到安裝 Arm License Server 的計算機上。在 /opt/arm/licenceserver 目錄中建立一個名為 licenses 的目錄，並將您的許可證檔案複製到該目錄中 重新啟動 Arm License Server 下載Arm Allinea Studio downloads page 安裝需要 python &gt;= 2.7 需要 C Libraries：SUSE and RHEL: glibc-devel Ubuntu: libc6-dev 解壓縮 tar -xvf .tar.gz cd 預設配置安裝 sudo ./.sh可以自定義 options 安裝程式將顯示EULA並提示您同意條款 接下來主要介紹 ArmPL 的配置和使用 配置 檢視可用的環境模組 module avail 可能需要配置MODULEPATH環境變數以包含安裝目錄 export MODULEPATH=$MODULEPATH:/opt/arm/modulefiles/ 為您使用的編譯器載入適當的模組，如果使用的是用於Linux的Arm Compiler，則建議僅載入編譯器模組，如果使用gcc，則必須載入所需的特定Arm Performance Libraries模組module load Generic-AArch64/RHEL/7/arm-linux-compiler/20.0如果使用gcc編譯器，請確保載入正確的模組module load Generic-AArch64/RHEL/7/gcc-9.2.0/armpl/20.0.0Tips: 可以考慮將模組載入命令新增到您的.profile中，以在每次登入時自動執行它 根據使用的編譯器，使用以下命令檢查環境 Compiler Command armclang which armclang gcc which gcc 舉個例子ArmPL 包含許多示例程式，如果是預設安裝的，位置在/opt/arm//examples/ 這裡以 fftw_dft_r2c_1d_c_example.c 為例，具體做什麼就不看了 編譯和連結的選項：-armpl: 與arm編譯器進行編譯和連結時-mcpu = native: 允許編譯器從主機系統推斷要使用的庫-L\\lib: 新增庫搜尋路徑-larmpl_lp64: 連結到Arm Performance Libraries-lgfortran: 連結到 gcc Fortran 執行庫-lm: 連結到標準數學庫 編譯原始碼，生成一個目標檔案 Compiler Command armclang armclang -c -armpl -mcpu=native fftw_dft_r2c_1d_c_example.c -o fftw_dft_r2c_1d_c_example.o gcc gcc -c -I/include fftw_dft_r2c_1d_c_example.c -o fftw_dft_r2c_1d_c_example.o 將目的碼連結到可執行檔案中 Compiler Command armclang armclang fftw_dft_r2c_1d_c_example.o -o fftw_dft_r2c_1d_c_example.exe -armpl -mcpu=native -lm gcc gcc fftw_dft_r2c_1d_c_example.o -L/lib -o fftw_dft_r2c_1d_c_example.exe -larmpl_lp64 -lgfortran -lm 在Arm系統上執行可執行檔案 ./fftw_dft_r2c_1d_c_example.exe可以看到相應的輸出 Compile and test the examples examples目錄包含以下內容： 一個GNUmakefile，用於生成和執行所有示例程式 C 原始碼 .c Fortran原始碼 .f90 每個示例的預期輸出 .expected Makefile編譯並執行每個示例，然後將生成的輸出與預期的輸出進行比較。任何差異都會標記為錯誤","categories":[{"name":"技術","slug":"技術","permalink":"/categories/技術/"}],"tags":[{"name":"數學","slug":"數學","permalink":"/tags/數學/"},{"name":"高效能運算","slug":"高效能運算","permalink":"/tags/高效能運算/"}],"keywords":[{"name":"技術","slug":"技術","permalink":"/categories/技術/"}]},{"title":"一道情人節的密碼題","slug":"2018-08-17-Valentine-pw","date":"2018-08-17T11:18:12.000Z","updated":"2020-08-23T05:44:18.861Z","comments":true,"path":"2018/08/17/2018-08-17-Valentine-pw/","link":"","permalink":"/2018/08/17/2018-08-17-Valentine-pw/","excerpt":"七夕快樂哦","text":"七夕快樂哦 七夕快樂哦今天是七夕呢，寫這個的起因是一個同學的女朋友發了個密碼解密給他。這就是今天要解決的問題嘍，當然，先把兩種密碼的相關知識貼上。 凱撒密碼在密碼學中，愷撒密碼（英語：Caesar cipher），或稱愷撒加密、愷撒變換、變換加密，是一種最簡單且最廣為人知的加密技術。它是一種替換加密的技術，明文中的所有字母都在字母表上向後（或向前）按照一個固定數目進行偏移後被替換成密文。例如，當偏移量是3的時候，所有的字母A將被替換成D，B變成E，以此類推。這個加密方法是以羅馬共和時期愷撒的名字命名的，當年愷撒曾用此方法與其將軍們進行聯繫。 愷撒密碼通常被作為其他更複雜的加密方法中的一個步驟，例如維吉尼亞密碼。愷撒密碼還在現代的ROT13系統中被應用。但是和所有的利用字母表進行替換的加密技術一樣，愷撒密碼非常容易被破解，而且在實際應用中也無法保證通信安全。 柵欄密碼所謂柵欄密碼，就是把要加密的明文分成N個一組，然後把每組的第i個字連起來，形成一段無規律的話。 一般比較常見的是2欄的棚欄密碼。比如明文：THERE IS A CIPHER去掉空格後變為：THEREISACIPHER兩個一組，得到：TH ER EI SA CI PH ER先取出第一個字母：TEESCPE再取出第二個字母：HRIAIHR連在一起就是：TEESCPEHRIAIHR這樣就得到我們需要的密碼了！ 而解密的時候，我們先吧密文從中間分開，變為兩行：T E E S C P EH R I A I H R再按上下上下的順序組合起來：THEREISACIPHER分出空格，就可以得到原文了：THERE IS A CIPHER Python 簡單實現十幾行代碼，非常簡單。後面的 for 循環部分應該還能再簡化一點。import math inp = 'cvpgygppjvtgpgfgjgtq' num = -2 step1 = [chr(97 + (ord(x)-97+num)%26) for x in inp] print (step1) num2 = 3 num3 = math.ceil(len(step1)/num2) s2 = [step1[i*num3: (num3*(i+1)) if (num3*(i+1))&lt;len(step1) else len(step1)] for i in range(num2)] print(s2) s3 = [] for j in range(num3): for i in range(num2): try: s3.append(s2[i][j]) except: pass print (s3) ''' and then there were none '''","categories":[{"name":"技術","slug":"技術","permalink":"/categories/技術/"}],"tags":[{"name":"演算法","slug":"演算法","permalink":"/tags/演算法/"}],"keywords":[{"name":"技術","slug":"技術","permalink":"/categories/技術/"}]},{"title":"基於 Hexo 搭建個人靜態部落格","slug":"2018-01-29-hello-hexo","date":"2018-01-29T03:00:18.000Z","updated":"2020-08-23T05:45:16.395Z","comments":true,"path":"2018/01/29/2018-01-29-hello-hexo/","link":"","permalink":"/2018/01/29/2018-01-29-hello-hexo/","excerpt":"本站搭建過程（已過氣）","text":"本站搭建過程（已過氣） 安裝安裝Node.js更換爲國內源，安裝 cnpm $ npm config set registry https://registry.npm.taobao.org $ npm config get registry $ npm install -g cnpm $ cmpm install hexo 安裝Git安裝Hexo$ npm install -g hexo-cli 建立一旦 Hexo 完成後，請執行下列指令，Hexo 會在指定資料夾中建立所有您需要的檔案。$ hexo init blog $ cd blog $ npm install 建立一篇新的文章$ hexo new [layout] &lt;title&gt; 佈局 路徑 post source/_posts page source draft source/_drafts 產生靜態檔案$ hexo generate 選項 描述 -d, —deploy 產生完成即部署網站 -w, —watch 監看檔案變更 啟動伺服器預設為 http://localhost:4000/$ hexo server 部署網站到Git可以直接使用git命令部署，將 public 資料夾裏的文件複製到git目錄下，之後使用 git commit$ hexo generate $ git add . $ git commit -m \"update\" $ git push origin master Clean$ hexo clean 列出網站資料$ hexo list &lt;type&gt; 顯示版本咨詢$ hexo version 更換主題在 themes 資料夾內，新增一個資料夾，並修改 _config.yml 內的 theme 設定，即可切換主題 渲染公式更換 markdown 渲染引擎 npm uninstall hexo-renderer-marked --save npm install hexo-renderer-kramed --save 修改 node_modules/kramed/lib/rules/inline.js 注意註釋部分 var inline = &#123; // escape: /^\\\\([\\\\`*&#123;&#125;\\[\\]()#$+\\-.!_&gt;])/, escape: /^\\\\([`*\\[\\]()#$+\\-.!_&gt;])/, autolink: /^&lt;([^ &gt;]+(@|:\\/)[^ &gt;]+)&gt;/, url: noop, html: /^&lt;!--[\\s\\S]*?--&gt;|^&lt;(\\w+(?!:\\/|[^\\w\\s@]*@)\\b)*?(?:\"[^\"]*\"|'[^']*'|[^'\"&gt;])*?&gt;([\\s\\S]*?)?&lt;\\/\\1&gt;|^&lt;(\\w+(?!:\\/|[^\\w\\s@]*@)\\b)(?:\"[^\"]*\"|'[^']*'|[^'\"&gt;])*?&gt;/, link: /^!?\\[(inside)\\]\\(href\\)/, reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/, nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/, reffn: /^!?\\[\\^(inside)\\]/, strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/, // em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/, br: /^ &#123;2,&#125;\\n(?!\\s*$)/, del: noop, text: /^[\\s\\S]+?(?=[\\\\&lt;!\\[_*`$]| &#123;2,&#125;\\n|$)/, math: /^\\$\\$\\s*([\\s\\S]*?[^\\$])\\s*\\$\\$(?!\\$)/, &#125;; 在主題中開啓 mathjax 在 themes/xxx/_config.yml 一般 math: enable: true per_page: true engine: mathjax 在需要渲染公式的文章的 Fornt-matter 中打開 mathjax --- mathjax: true --","categories":[{"name":"技術","slug":"技術","permalink":"/categories/技術/"}],"tags":[{"name":"Web","slug":"Web","permalink":"/tags/Web/"}],"keywords":[{"name":"技術","slug":"技術","permalink":"/categories/技術/"}]}]}