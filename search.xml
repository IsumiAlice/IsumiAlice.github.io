<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Arm PL 環境配置</title>
    <url>/2020/04/19/2020-04-19-Arm-PL/</url>
    <content><![CDATA[<p>在 CentOS 下配置 Arm 高效能運算庫<br><a id="more"></a><br>Arm Performance Libraries 作為 Linux 的 Arm Compiler 的一部分安裝，並且需要 Arm Allinea Studio 許可證</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Arm Allinea Studio 工具套件為在 Arm 硬體上開發 HPC 應用程式提供了完整的解決方案。 它包括： </p>
<ul>
<li>Arm C/C ++/Fortran 編譯器 </li>
<li>ArmPL </li>
<li>Arm Forge（Arm DDT，Arm MAP和Arm Performance Reports） </li>
</ul>
<p>需要許可證來使用這些工具。 有兩種許可證， Named User 和 Floating</p>
<p>在獲得許可證後，按照以下說明將其新增到系統中： </p>
<h3 id="Add-a-named-user-license"><a href="#Add-a-named-user-license" class="headerlink" title="Add a named user license"></a>Add a named user license</h3><ol>
<li>在 <code>/opt/arm/</code> 目錄中建立一個名為 licenses 的目錄 </li>
<li>將許可證檔案複製到 <code>/opt/arm/licenses</code> 目錄；如果選擇將許可證檔案放在其他位置，則必須將 <code>ARM_LICENSE_DIR</code> 環境變數設定為指向它 <code>export ARM_LICENSE_DIR=/opt/arm/licenses</code></li>
<li>Arm Forge 和 Arm Performance Reports 在其特定的安裝目錄中搜索許可證。如果使用的是 Arm Allinea Studio 許可證，並且沒有為這些工具使用單獨的許可證，請設定 <code>ALLINEA_LICENSE_DIR</code> 環境變數以將這些工具指向您的 Arm Allinea Studio 許可證 <code>export ALLINEA_LICENSE_DIR=/opt/arm/licenses &gt;</code></li>
</ol>
<p>named user license，無需安裝Arm License Server</p>
<h3 id="Setting-up-a-floating-license"><a href="#Setting-up-a-floating-license" class="headerlink" title="Setting up a floating license"></a>Setting up a floating license</h3><p>必須下載並安裝 <a href="https://developer.arm.com/tools-and-software/server-and-hpc/downloads/arm-licence-server" target="_blank" rel="noopener">Arm License Server</a> </p>
<p>浮動許可證由伺服器許可證檔案和客戶端許可證檔案組成，在<a href="https://www.arm.com/products/development-tools/server-and-hpc/allinea-studio/get-software?_ga=2.43607085.960219704.1587365001-756695113.1577670013" target="_blank" rel="noopener">這裡</a>申請 </p>
<p>檢查客戶端許可證是否包含執行Arm License Server的計算機的主機名或IP地址 </p>
<ol>
<li>將客戶端許可證新增到安裝 Arm Allinea Studio 的計算機上。在 <code>/opt/arm</code> 目錄中建立一個名為 <code>licenses</code> 的目錄 </li>
<li>同 named </li>
<li>同 named </li>
<li>將伺服器許可證檔案新增到安裝 Arm License Server 的計算機上。在 <code>/opt/arm/licenceserver</code> 目錄中建立一個名為 <code>licenses</code> 的目錄，並將您的許可證檔案複製到該目錄中 </li>
<li>重新啟動 Arm License Server </li>
</ol>
<h2 id="下載"><a href="#下載" class="headerlink" title="下載"></a>下載</h2><p><a href="https://developer.arm.com/products/software-development-tools/hpc/arm-allinea-studio/download" target="_blank" rel="noopener">Arm Allinea Studio downloads page</a> </p>
<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>需要 python &gt;= 2.7</p>
<p>需要 C Libraries：SUSE and RHEL: <code>glibc-devel</code> Ubuntu: <code>libc6-dev</code> </p>
<ol>
<li>解壓縮 <code>tar -xvf .tar.gz</code> </li>
<li><code>cd</code> </li>
<li>預設配置安裝 <code>sudo ./.sh</code><br>可以自定義 options</li>
<li>安裝程式將顯示EULA並提示您同意條款 接下來主要介紹 ArmPL 的配置和使用 </li>
</ol>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li>檢視可用的環境模組 <code>module avail</code> 可能需要配置MODULEPATH環境變數以包含安裝目錄 <code>export MODULEPATH=$MODULEPATH:/opt/arm/modulefiles/</code> </li>
<li>為您使用的編譯器載入適當的模組，如果使用的是用於Linux的Arm Compiler，則建議僅載入編譯器模組，如果使用gcc，則必須載入所需的特定Arm Performance Libraries模組<br><code>module load Generic-AArch64/RHEL/7/arm-linux-compiler/20.0</code><br>如果使用gcc編譯器，請確保載入正確的模組<br><code>module load Generic-AArch64/RHEL/7/gcc-9.2.0/armpl/20.0.0</code><br>Tips: 可以考慮將模組載入命令新增到您的.profile中，以在每次登入時自動執行它 </li>
<li>根據使用的編譯器，使用以下命令檢查環境 </li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th>Compiler</th>
<th>Command</th>
</tr>
</thead>
<tbody>
<tr>
<td>armclang</td>
<td><code>which armclang</code></td>
</tr>
<tr>
<td>gcc</td>
<td><code>which gcc</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="舉個例子"><a href="#舉個例子" class="headerlink" title="舉個例子"></a>舉個例子</h2><p>ArmPL 包含許多示例程式，如果是預設安裝的，位置在<code>/opt/arm//examples/</code> </p>
<p>這裡以 <code>fftw_dft_r2c_1d_c_example.c</code> 為例，具體做什麼就不看了 </p>
<p>編譯和連結的選項：<br>-armpl: 與arm編譯器進行編譯和連結時<br>-mcpu = native: 允許編譯器從主機系統推斷要使用的庫<br>-L\lib: 新增庫搜尋路徑<br>-larmpl_lp64: 連結到Arm Performance Libraries<br>-lgfortran: 連結到 gcc Fortran 執行庫<br>-lm: 連結到標準數學庫 </p>
<ol>
<li>編譯原始碼，生成一個目標檔案 </li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>Compiler</strong></th>
<th><strong>Command</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>armclang</td>
<td><code>armclang -c -armpl -mcpu=native fftw_dft_r2c_1d_c_example.c -o fftw_dft_r2c_1d_c_example.o</code></td>
</tr>
<tr>
<td>gcc</td>
<td><code>gcc -c -I/include fftw_dft_r2c_1d_c_example.c -o fftw_dft_r2c_1d_c_example.o</code></td>
</tr>
</tbody>
</table>
</div>
<ol>
<li>將目的碼連結到可執行檔案中 </li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>Compiler</strong></th>
<th><strong>Command</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>armclang</td>
<td><code>armclang fftw_dft_r2c_1d_c_example.o -o fftw_dft_r2c_1d_c_example.exe -armpl -mcpu=native -lm</code></td>
</tr>
<tr>
<td>gcc</td>
<td><code>gcc fftw_dft_r2c_1d_c_example.o -L/lib -o fftw_dft_r2c_1d_c_example.exe -larmpl_lp64 -lgfortran -lm</code></td>
</tr>
</tbody>
</table>
</div>
<ol>
<li>在Arm系統上執行可執行檔案 <code>./fftw_dft_r2c_1d_c_example.exe</code><br>可以看到相應的輸出 </li>
</ol>
<h2 id="Compile-and-test-the-examples-examples"><a href="#Compile-and-test-the-examples-examples" class="headerlink" title="Compile and test the examples examples"></a>Compile and test the examples examples</h2><p>目錄包含以下內容： </p>
<ul>
<li>一個GNUmakefile，用於生成和執行所有示例程式 </li>
<li>C 原始碼 .c </li>
<li>Fortran原始碼 .f90 </li>
<li>每個示例的預期輸出 .expected </li>
</ul>
<p>Makefile編譯並執行每個示例，然後將生成的輸出與預期的輸出進行比較。任何差異都會標記為錯誤</p>
]]></content>
      <categories>
        <category>技術</category>
      </categories>
      <tags>
        <tag>數學</tag>
        <tag>高效能運算</tag>
      </tags>
  </entry>
  <entry>
    <title>一道情人節的密碼題</title>
    <url>/2018/08/17/2018-08-17-Valentine-pw/</url>
    <content><![CDATA[<p>七夕快樂哦<br><a id="more"></a></p>
<h2 id="七夕快樂哦"><a href="#七夕快樂哦" class="headerlink" title="七夕快樂哦"></a>七夕快樂哦</h2><p>今天是七夕呢，寫這個的起因是一個同學的女朋友發了個密碼解密給他。<br><img src="https://raw.githubusercontent.com/IsumiAlice/IsumiPic/master/20200410231059.jpg" srcset="/img/loading.gif" alt><br>這就是今天要解決的問題嘍，當然，先把兩種密碼的相關知識貼上。</p>
<h2 id="凱撒密碼"><a href="#凱撒密碼" class="headerlink" title="凱撒密碼"></a>凱撒密碼</h2><p>在<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%AD%A6" title="密碼學" target="_blank" rel="noopener">密碼學</a>中，<strong>愷撒密碼</strong>（英語：Caesar cipher），或稱<strong>愷撒加密</strong>、<strong>愷撒變換</strong>、<strong>變換加密</strong>，是一種最簡單且最廣為人知的加密技術。它是一種<a href="https://zh.wikipedia.org/wiki/%E6%9B%BF%E6%8D%A2%E5%BC%8F%E5%AF%86%E7%A0%81" title="替換式密碼" target="_blank" rel="noopener">替換加密</a>的技術，<a href="https://zh.wikipedia.org/wiki/%E6%98%8E%E6%96%87" title="明文" target="_blank" rel="noopener">明文</a>中的所有字母都在<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E6%AF%8D%E8%A1%A8" title="字母表" target="_blank" rel="noopener">字母表</a>上向後（或向前）按照一個固定數目進行偏移後被替換成<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E6%96%87" title="密文" target="_blank" rel="noopener">密文</a>。例如，當偏移量是3的時候，所有的字母A將被替換成D，B變成E，以此類推。這個加密方法是以<a href="https://zh.wikipedia.org/wiki/%E7%BE%85%E9%A6%AC%E5%85%B1%E5%92%8C" title="羅馬共和" target="_blank" rel="noopener">羅馬共和</a>時期<a href="https://zh.wikipedia.org/wiki/%E6%81%BA%E6%92%92" title="愷撒" target="_blank" rel="noopener">愷撒</a>的名字命名的，當年愷撒曾用此方法與其將軍們進行聯繫。</p>
<p>愷撒密碼通常被作為其他更複雜的加密方法中的一個步驟，例如<a href="https://zh.wikipedia.org/wiki/%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81" title="維吉尼亞密碼" target="_blank" rel="noopener">維吉尼亞密碼</a>。愷撒密碼還在現代的<a href="https://zh.wikipedia.org/wiki/ROT13" title="ROT13" target="_blank" rel="noopener">ROT13</a>系統中被應用。但是和所有的利用字母表進行替換的加密技術一樣，愷撒密碼非常容易被破解，而且在實際應用中也無法保證通信安全。</p>
<h2 id="柵欄密碼"><a href="#柵欄密碼" class="headerlink" title="柵欄密碼"></a>柵欄密碼</h2><p>所謂柵欄<a href="https://www.itsfun.com.tw/%E5%AF%86%E7%A2%BC/wiki-8783265-8437835" target="_blank" rel="noopener">密碼</a>，就是把要加密的明文分成N個一組，然後把每組的第i個字連起來，形成一段無規律的話。</p>
<p>一般比較常見的是2欄的棚欄密碼。<br>比如明文：THERE IS A CIPHER<br>去掉空格後變為：THEREISACIPHER<br>兩個一組，得到：TH ER EI SA CI PH ER<br>先取出第一個字母：TEESCPE<br>再取出第二個字母：HRIAIHR<br>連在一起就是：TEESCPEHRIAIHR<br>這樣就得到我們需要的密碼了！</p>
<p>而解密的時候，我們先吧<a href="https://www.itsfun.com.tw/%E5%AF%86%E6%96%87/wiki-4343875-4728655" target="_blank" rel="noopener">密文</a>從中間分開，變為兩行：<br>T E E S C P E<br>H R I A I H R<br>再按上下上下的順序組合起來：<br>THEREISACIPHER<br>分出<a href="https://www.itsfun.com.tw/%E7%A9%BA%E6%A0%BC/wiki-1130465-5262045" target="_blank" rel="noopener">空格</a>，就可以得到原文了：<br>THERE IS A CIPHER</p>
<h2 id="Python-簡單實現"><a href="#Python-簡單實現" class="headerlink" title="Python 簡單實現"></a>Python 簡單實現</h2><p>十幾行代碼，非常簡單。<br>後面的 for 循環部分應該還能再簡化一點。<br><pre><code class="hljs python"><span class="hljs-keyword">import</span> math
inp = <span class="hljs-string">'cvpgygppjvtgpgfgjgtq'</span>
num = <span class="hljs-number">-2</span>
step1 = [chr(<span class="hljs-number">97</span> + (ord(x)<span class="hljs-number">-97</span>+num)%<span class="hljs-number">26</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> inp]
<span class="hljs-keyword">print</span> (step1)

num2 = <span class="hljs-number">3</span>
num3 = math.ceil(len(step1)/num2)
s2 = [step1[i*num3: (num3*(i+<span class="hljs-number">1</span>)) <span class="hljs-keyword">if</span> (num3*(i+<span class="hljs-number">1</span>))&lt;len(step1) <span class="hljs-keyword">else</span> len(step1)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(num2)]
print(s2)
s3 = []
<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(num3):
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(num2):
        <span class="hljs-keyword">try</span>:
            s3.append(s2[i][j])
        <span class="hljs-keyword">except</span>:
            <span class="hljs-keyword">pass</span>
<span class="hljs-keyword">print</span> (s3)
<span class="hljs-string">'''
and then there were none
'''</span></code></pre></p>
]]></content>
      <categories>
        <category>技術</category>
      </categories>
      <tags>
        <tag>演算法</tag>
      </tags>
  </entry>
  <entry>
    <title>基於 Hexo 搭建個人靜態部落格</title>
    <url>/2018/01/29/2018-01-29-hello-hexo/</url>
    <content><![CDATA[<p>本站搭建過程（已過氣）<br><a id="more"></a></p>
<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>安裝<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a><br>更換爲國內源，安裝 cnpm</p>
<pre><code class="hljs undefined"><span class="hljs-symbol">$</span> npm config <span class="hljs-keyword">set</span> registry <span class="hljs-comment">https:</span>//<span class="hljs-comment">registry.npm.taobao.org</span>
$ npm <span class="hljs-comment">config get registry</span>

$ npm <span class="hljs-comment">install -g cnpm</span>
$ cmpm <span class="hljs-comment">install hexo</span></code></pre>
<p>安裝<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a><br>安裝<a href="https://hexo.io/zh-tw/" target="_blank" rel="noopener">Hexo</a><br><pre><code class="hljs bash">$ npm install -g hexo-cli</code></pre></p>
<h2 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h2><p>一旦 Hexo 完成後，請執行下列指令，Hexo 會在指定資料夾中建立所有您需要的檔案。<br><pre><code class="hljs bash">$ hexo init blog
$ <span class="hljs-built_in">cd</span> blog
$ npm install</code></pre></p>
<h3 id="建立一篇新的文章"><a href="#建立一篇新的文章" class="headerlink" title="建立一篇新的文章"></a>建立一篇新的文章</h3><pre><code class="hljs bash">$ hexo new [layout] &lt;title&gt;</code></pre>
<div class="table-container">
<table>
<thead>
<tr>
<th>佈局</th>
<th>路徑</th>
</tr>
</thead>
<tbody>
<tr>
<td>post</td>
<td>source/_posts</td>
</tr>
<tr>
<td>page</td>
<td>source</td>
</tr>
<tr>
<td>draft</td>
<td>source/_drafts</td>
</tr>
</tbody>
</table>
</div>
<h3 id="產生靜態檔案"><a href="#產生靜態檔案" class="headerlink" title="產生靜態檔案"></a>產生靜態檔案</h3><pre><code class="hljs bash">$ hexo generate</code></pre>
<div class="table-container">
<table>
<thead>
<tr>
<th>選項</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d, —deploy</td>
<td>產生完成即部署網站</td>
</tr>
<tr>
<td>-w, —watch</td>
<td>監看檔案變更</td>
</tr>
</tbody>
</table>
</div>
<h3 id="啟動伺服器"><a href="#啟動伺服器" class="headerlink" title="啟動伺服器"></a>啟動伺服器</h3><p>預設為 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br><pre><code class="hljs bash">$ hexo server</code></pre></p>
<h3 id="部署網站到Git"><a href="#部署網站到Git" class="headerlink" title="部署網站到Git"></a>部署網站到Git</h3><p>可以直接使用git命令部署，將 <code>public</code> 資料夾裏的文件複製到git目錄下，之後使用 <code>git commit</code><br><pre><code class="hljs bash">$ hexo generate

$ git add .
$ git commit -m <span class="hljs-string">"update"</span>
$ git push origin master</code></pre></p>
<h3 id="Clean"><a href="#Clean" class="headerlink" title="Clean"></a>Clean</h3><pre><code class="hljs bash">$ hexo clean</code></pre>
<h3 id="列出網站資料"><a href="#列出網站資料" class="headerlink" title="列出網站資料"></a>列出網站資料</h3><pre><code class="hljs bash">$ hexo list &lt;<span class="hljs-built_in">type</span>&gt;</code></pre>
<h3 id="顯示版本咨詢"><a href="#顯示版本咨詢" class="headerlink" title="顯示版本咨詢"></a>顯示版本咨詢</h3><pre><code class="hljs bash">$ hexo version</code></pre>
<h2 id="更換主題"><a href="#更換主題" class="headerlink" title="更換主題"></a>更換主題</h2><p>在 <code>themes</code> 資料夾內，新增一個資料夾，並修改 <code>_config.yml</code> 內的 <code>theme</code> 設定，即可切換主題</p>
<h2 id="渲染公式"><a href="#渲染公式" class="headerlink" title="渲染公式"></a>渲染公式</h2><p>更換 markdown 渲染引擎</p>
<pre><code class="hljs undefined">npm <span class="hljs-keyword">uninstall</span> hexo-renderer-marked <span class="hljs-comment">--save</span>
npm <span class="hljs-keyword">install</span> hexo-renderer-kramed <span class="hljs-comment">--save</span></code></pre>
<p>修改 node_modules/kramed/lib/rules/inline.js</p>
<p>注意註釋部分</p>
<pre><code class="hljs undefined">var inline = &#123;
  // escape: /^<span class="hljs-symbol">\\</span>([<span class="hljs-symbol">\\</span>`*&#123;&#125;<span class="hljs-symbol">\[</span><span class="hljs-symbol">\]</span>()#$+<span class="hljs-symbol">\-</span>.!_&gt;])/,
  escape: /^<span class="hljs-symbol">\\</span>([`*<span class="hljs-symbol">\[</span><span class="hljs-symbol">\]</span>()#$+<span class="hljs-symbol">\-</span>.!_&gt;])/,
  autolink: /^&lt;([^ &gt;]+(@|:<span class="hljs-symbol">\/</span>)[^ &gt;]+)&gt;/,
  url: noop,
  html: /^&lt;!--[<span class="hljs-symbol">\s</span><span class="hljs-symbol">\S</span>]*?--&gt;|^&lt;(<span class="hljs-symbol">\w</span>+(?!:<span class="hljs-symbol">\/</span>|[^<span class="hljs-symbol">\w</span><span class="hljs-symbol">\s</span>@]*@)<span class="hljs-symbol">\b</span>)*?(?:"[^"]*"|'[^']*'|[^'"&gt;])*?&gt;([<span class="hljs-symbol">\s</span><span class="hljs-symbol">\S</span>]*?)?&lt;<span class="hljs-symbol">\/</span><span class="hljs-symbol">\1</span>&gt;|^&lt;(<span class="hljs-symbol">\w</span>+(?!:<span class="hljs-symbol">\/</span>|[^<span class="hljs-symbol">\w</span><span class="hljs-symbol">\s</span>@]*@)<span class="hljs-symbol">\b</span>)(?:"[^"]*"|'[^']*'|[^'"&gt;])*?&gt;/,
  link: /^!?<span class="hljs-symbol">\[</span>(inside)<span class="hljs-symbol">\]</span><span class="hljs-symbol">\(</span>href<span class="hljs-symbol">\)</span>/,
  reflink: /^!?<span class="hljs-symbol">\[</span>(inside)<span class="hljs-symbol">\]</span><span class="hljs-symbol">\s</span>*<span class="hljs-symbol">\[</span>([^<span class="hljs-symbol">\]</span>]*)<span class="hljs-symbol">\]</span>/,
  nolink: /^!?<span class="hljs-symbol">\[</span>((?:<span class="hljs-symbol">\[</span>[^<span class="hljs-symbol">\]</span>]*<span class="hljs-symbol">\]</span>|[^<span class="hljs-symbol">\[</span><span class="hljs-symbol">\]</span>])*)<span class="hljs-symbol">\]</span>/,
  reffn: /^!?<span class="hljs-symbol">\[</span><span class="hljs-symbol">\^</span>(inside)<span class="hljs-symbol">\]</span>/,
  strong: /^__([<span class="hljs-symbol">\s</span><span class="hljs-symbol">\S</span>]+?)__(?!_)|^<span class="hljs-symbol">\*</span><span class="hljs-symbol">\*</span>([<span class="hljs-symbol">\s</span><span class="hljs-symbol">\S</span>]+?)<span class="hljs-symbol">\*</span><span class="hljs-symbol">\*</span>(?!<span class="hljs-symbol">\*</span>)/,
  // em: /^<span class="hljs-symbol">\b</span>_((?:__|[<span class="hljs-symbol">\s</span><span class="hljs-symbol">\S</span>])+?)_<span class="hljs-symbol">\b</span>|^<span class="hljs-symbol">\*</span>((?:<span class="hljs-symbol">\*</span><span class="hljs-symbol">\*</span>|[<span class="hljs-symbol">\s</span><span class="hljs-symbol">\S</span>])+?)<span class="hljs-symbol">\*</span>(?!<span class="hljs-symbol">\*</span>)/,
  em: /^<span class="hljs-symbol">\*</span>((?:<span class="hljs-symbol">\*</span><span class="hljs-symbol">\*</span>|[<span class="hljs-symbol">\s</span><span class="hljs-symbol">\S</span>])+?)<span class="hljs-symbol">\*</span>(?!<span class="hljs-symbol">\*</span>)/,
  code: /^(`+)<span class="hljs-symbol">\s</span>*([<span class="hljs-symbol">\s</span><span class="hljs-symbol">\S</span>]*?[^`])<span class="hljs-symbol">\s</span>*<span class="hljs-symbol">\1</span>(?!`)/,
  br: /^ &#123;2,&#125;<span class="hljs-symbol">\n</span>(?!<span class="hljs-symbol">\s</span>*$)/,
  del: noop,
  text: /^[<span class="hljs-symbol">\s</span><span class="hljs-symbol">\S</span>]+?(?=[<span class="hljs-symbol">\\</span>&lt;!<span class="hljs-symbol">\[</span>_*`$]| &#123;2,&#125;<span class="hljs-symbol">\n</span>|$)/,
  math: /^<span class="hljs-symbol">\$</span><span class="hljs-symbol">\$</span><span class="hljs-symbol">\s</span>*([<span class="hljs-symbol">\s</span><span class="hljs-symbol">\S</span>]*?[^<span class="hljs-symbol">\$</span>])<span class="hljs-symbol">\s</span>*<span class="hljs-symbol">\$</span><span class="hljs-symbol">\$</span>(?!<span class="hljs-symbol">\$</span>)/,
&#125;;</code></pre>
<p>在主題中開啓 mathjax</p>
<p>在 themes/xxx/_config.yml</p>
<p>一般</p>
<pre><code class="hljs undefined"><span class="hljs-attr">math:</span>
  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>
  <span class="hljs-attr">per_page:</span> <span class="hljs-literal">true</span>
  <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span></code></pre>
<p>在需要渲染公式的文章的 Fornt-matter 中打開 mathjax</p>
<pre><code class="hljs undefined"><span class="hljs-meta">---</span>
<span class="hljs-attr">mathjax:</span> <span class="hljs-literal">true</span>
<span class="hljs-string">--</span></code></pre>]]></content>
      <categories>
        <category>技術</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
</search>
