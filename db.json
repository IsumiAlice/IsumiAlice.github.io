{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/diaspora/source/css/diaspora.css","path":"css/diaspora.css","modified":1,"renderable":1},{"_id":"themes/diaspora/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/diaspora/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/diaspora/source/js/diaspora.js","path":"js/diaspora.js","modified":1,"renderable":1},{"_id":"themes/diaspora/source/js/plugin.js","path":"js/plugin.js","modified":1,"renderable":1},{"_id":"themes/diaspora/source/js/typed.js","path":"js/typed.js","modified":1,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/photoswipe-ui-default.js","path":"photoswipe/photoswipe-ui-default.js","modified":1,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/photoswipe-ui-default.min.js","path":"photoswipe/photoswipe-ui-default.min.js","modified":1,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/photoswipe.css","path":"photoswipe/photoswipe.css","modified":1,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/photoswipe.min.js","path":"photoswipe/photoswipe.min.js","modified":1,"renderable":1},{"_id":"themes/diaspora/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/photoswipe.js","path":"photoswipe/photoswipe.js","modified":1,"renderable":1},{"_id":"themes/diaspora/source/img/cover.jpg","path":"img/cover.jpg","modified":1,"renderable":1},{"_id":"themes/diaspora/source/img/welcome-cover.jpg","path":"img/welcome-cover.jpg","modified":1,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/default-skin/default-skin.css","path":"photoswipe/default-skin/default-skin.css","modified":1,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/default-skin/default-skin.png","path":"photoswipe/default-skin/default-skin.png","modified":1,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/default-skin/default-skin.svg","path":"photoswipe/default-skin/default-skin.svg","modified":1,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/default-skin/preloader.gif","path":"photoswipe/default-skin/preloader.gif","modified":1,"renderable":1}],"Cache":[{"_id":"themes/diaspora/.gitignore","hash":"711861c1bdc49a4d5c6704a22546dcafc31d4730","modified":1583710424000},{"_id":"themes/diaspora/LICENSE","hash":"63175a16773044bed84e1778009a54ad03dd5520","modified":1583710424000},{"_id":"themes/diaspora/README.md","hash":"a99289142b877da1e6203f21eeaed712495369b6","modified":1583710424000},{"_id":"themes/diaspora/_config.yml","hash":"e84076eec6b9d36d4f0eca77c9ba9648e71c0b1b","modified":1597761722238},{"_id":"source/_posts/Arm-PL.md","hash":"b1348854eae10e2a227a3fdea3bd40bec12185a6","modified":1597763655085},{"_id":"source/_posts/Raspberry-ASF.md","hash":"ce315bee395abc57dee4c1b085294db3ee227f5f","modified":1592321998021},{"_id":"source/_posts/Raspberry-hello.md","hash":"9edd3b2b5bc4e6f132f9224856fa62aa03acc099","modified":1592322133639},{"_id":"source/_posts/Steam-bg.md","hash":"c6f1c6f09ecab328b1c23558d909ced68457a82a","modified":1592497410741},{"_id":"source/_posts/Valentine-pw.md","hash":"f8ef4dae99203d2da23745806506709f212c29d8","modified":1592497429425},{"_id":"source/_posts/Windows-puu.md","hash":"9826ea41d73c9e83b2fe585b187d5617ec8d9dd1","modified":1592497394305},{"_id":"source/_posts/hello-hexo.md","hash":"4088a722f0bbce9000090afeb884387bf09e2ab5","modified":1592321856817},{"_id":"source/_posts/youtube-dl.md","hash":"9d98a739863259fe8e2e64a142877d8ce2a5885c","modified":1592497435271},{"_id":"source/about/index.md","hash":"a1797f2534e02ab963ad614d1077d32db7cd75eb","modified":1597763552920},{"_id":"source/categories/index.md","hash":"8ac3a6cc59c76a3681bccd9f1dda6a0bc8ae3d78","modified":1597763850074},{"_id":"source/tags/index.md","hash":"13c8a91d957dddba6e8fbb77a36c57a1ea488a3e","modified":1597763819451},{"_id":"source/search/index.md","hash":"cb5979e017411d8c25373491448281cbd81fada1","modified":1597761487260},{"_id":"themes/diaspora/languages/default.yml","hash":"1b2b75ca9ff3bfeddb596239889b584cdfcecc32","modified":1583710424000},{"_id":"themes/diaspora/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1583710424000},{"_id":"themes/diaspora/languages/it.yml","hash":"6ae71000ed039f56572143ffe90da17b95d1a66f","modified":1583710424000},{"_id":"themes/diaspora/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1583710424000},{"_id":"themes/diaspora/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1583710424000},{"_id":"themes/diaspora/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1583710424000},{"_id":"themes/diaspora/languages/zh-CN.yml","hash":"ccbba6315760755926f5abfe1b98c225a6650581","modified":1583710424000},{"_id":"themes/diaspora/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1583710424000},{"_id":"themes/diaspora/layout/archive.ejs","hash":"80aa442d757c082f37590a35a1f8f4f798996b4e","modified":1583710424000},{"_id":"themes/diaspora/layout/category.ejs","hash":"920114db892fe39fab097c4f65d8ffc9b2a76b69","modified":1583710424000},{"_id":"themes/diaspora/layout/index.ejs","hash":"61158c6df5bb665aa5fa39f5fba950f23867eef6","modified":1583710424000},{"_id":"themes/diaspora/layout/page.ejs","hash":"ad954fb44615f603674782703a5a7f5b1f24ebf4","modified":1583710424000},{"_id":"themes/diaspora/layout/layout.ejs","hash":"b9acea1512eba9ae16a6fd7f3f37b9fa3f4a0c95","modified":1583710424000},{"_id":"themes/diaspora/layout/post.ejs","hash":"e585d8b4680c52dccfc40ffa6b2c5df515bf20d2","modified":1583710424000},{"_id":"themes/diaspora/layout/tag.ejs","hash":"e0c36bded984989c864227801dcd289207241f76","modified":1583710424000},{"_id":"themes/diaspora/scripts/page_title.js","hash":"35dbc39e4edd53b20f5433dc0d1708024049186d","modified":1583710424000},{"_id":"themes/diaspora/.github/ISSUE_TEMPLATE/issues-template.md","hash":"34869fddae53c69c2648712d2f82fe9cb6e9cb0d","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/categories.ejs","hash":"4a569e3d4e1a0498238aea62abdaf27af96d5a12","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/google-analytics.ejs","hash":"4806289a1c3de19a1cc4e6242c82cdd429c3bfe8","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/head.ejs","hash":"7f7f2955fb48205673f8fe96293bfc80ea63963a","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/list.ejs","hash":"8e03499580aa81ec0b4c8316347b4e3839849007","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/mathjax.ejs","hash":"87918a6547489265695cf21e09c35559412c29b1","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/menu.ejs","hash":"ace01623958bbbf40207e71ed6ef9da0c46e1326","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/photoswipe.ejs","hash":"d1d36cf0a2c03ff3c2acbc208fe11cd0afd8b7bd","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/screen.ejs","hash":"2796ef7bc1c2d2dd9fad25b486d6f02475a3fe42","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/search.ejs","hash":"12210ce0d939650b336f428fb8ba4e40b19b42ae","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/scripts.ejs","hash":"ecb5fbee97c93ed438650f64d7939c5e9401c11e","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/tags.ejs","hash":"fd398ab315ef57c8197cd218237ec07dcd92f372","modified":1583710424000},{"_id":"themes/diaspora/source/css/diaspora.css","hash":"b4828ef890a32ec63e043a7270145ae5dd0ce10b","modified":1583710424000},{"_id":"themes/diaspora/source/img/favicon.png","hash":"efb938a836c0b69baecdaadb89a94511f9abb299","modified":1583710424000},{"_id":"themes/diaspora/source/img/logo.png","hash":"26aa13d23a30369b683aab639499f977fe9f8175","modified":1583710424000},{"_id":"themes/diaspora/source/js/diaspora.js","hash":"2f83d9355feb9356d032760781695b081a579f35","modified":1583710424000},{"_id":"themes/diaspora/source/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1583710424000},{"_id":"themes/diaspora/source/js/typed.js","hash":"e817f2a2b12c2da5e76cc1428912fe5900eb100c","modified":1583710424000},{"_id":"themes/diaspora/source/photoswipe/photoswipe-ui-default.js","hash":"c844cca2f9a9969a810a0fb534063e008424c936","modified":1583710424000},{"_id":"themes/diaspora/source/photoswipe/photoswipe-ui-default.min.js","hash":"d80b713ca1bab90f27a8af7d8e43563f0fe81860","modified":1583710424000},{"_id":"themes/diaspora/source/photoswipe/photoswipe.css","hash":"a31fa495095783ef5a84ba4dba0bd6f7de3b07ea","modified":1583710424000},{"_id":"themes/diaspora/source/photoswipe/photoswipe.min.js","hash":"791703278e7c576b08b67f18404bae9eb8cebfaf","modified":1583710424000},{"_id":"themes/diaspora/source/js/jquery.min.js","hash":"3f1b0e9e54af1af2db2c8a639530448723462151","modified":1583710424000},{"_id":"themes/diaspora/source/photoswipe/photoswipe.js","hash":"30967789eb2a3e1da9927e71f4f3c5339ebed39a","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/post/article.ejs","hash":"9147c8e00c7ed31fb97e592ed6bcc739a8510fe2","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/post/gitalk.ejs","hash":"d3d7d3cfd57fcfb2ab41ae743569853dd4489098","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/post/header.ejs","hash":"6e1bdde001df6c3b97bf4bf0bf7c2c4160f2071c","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/post/item.ejs","hash":"17992d3ebcefa840c4bdd5d2de4a7b80c2a7f999","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/post/tag.ejs","hash":"c2b4ce7e1d7eed59f4c333915cd431f008f898e3","modified":1583710424000},{"_id":"themes/diaspora/layout/_partial/post/title.ejs","hash":"33f2a96f17fb1efa354c92aef906d96984abd9ab","modified":1583710424000},{"_id":"themes/diaspora/source/img/cover.jpg","hash":"dc7103d4c4e05650595712b3fa395b89726df32b","modified":1583710424000},{"_id":"themes/diaspora/source/img/welcome-cover.jpg","hash":"c393dfeb52aff20a9921c1f56e2ce127683ab35a","modified":1583710424000},{"_id":"themes/diaspora/source/photoswipe/default-skin/default-skin.css","hash":"5763bd1a8015774f37215359bfcb5edd65d198a6","modified":1583710424000},{"_id":"themes/diaspora/source/photoswipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1583710424000},{"_id":"themes/diaspora/source/photoswipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1583710424000},{"_id":"themes/diaspora/source/photoswipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1583710424000}],"Category":[{"name":"技術","_id":"cke03cgou0002r4k29v40l8b6"}],"Data":[],"Page":[{"title":"about me","date":"2020-06-16T15:27:43.000Z","cover":"https://gitee.com/IsumiAlice/IsumiPic/raw/master///20200515204633.jpg","_content":"\n\n社畜, 宅男, 站着尿尿神教教主\n\n會許多數學的計算機碩士\n\n圖形學, 高效能運算, 基礎數學, 機器學習\n\n目前在深圳划水\n\n前端知識基本為〇, 所以本部落格大部分都是照搬他人的程式碼\n\n喜歡遊戲, 小說, 甜食, 宇宙, 美少女\n\n最近愛上了刷馬桶和做三分鐘咖喱\n\n夢想是和外星美少女戀愛\n\n郵箱：isumialice@foxmail.com\n\nQQ：1261492496\n\n---\n\n### 部落格大事記\n\n**2020-8-18**\n\n將原程式碼上傳到 source 分支\n由於大部分技術內容都放到 yuque 上了，這個部落格以後就發些胡言亂語吧\n\n**2020-6-17**\n\n重新回到 Hexo + Sakura 的靜態頁面\n\n**2020-4-1**\n\n將技術相關的內容轉移到了 yuque 知識庫上：https://www.yuque.com/isumiai\n\n","source":"about/index.md","raw":"---\ntitle: about me\ndate: 2020-6-16 23:27:43\ncover: https://gitee.com/IsumiAlice/IsumiPic/raw/master///20200515204633.jpg\n---\n\n\n社畜, 宅男, 站着尿尿神教教主\n\n會許多數學的計算機碩士\n\n圖形學, 高效能運算, 基礎數學, 機器學習\n\n目前在深圳划水\n\n前端知識基本為〇, 所以本部落格大部分都是照搬他人的程式碼\n\n喜歡遊戲, 小說, 甜食, 宇宙, 美少女\n\n最近愛上了刷馬桶和做三分鐘咖喱\n\n夢想是和外星美少女戀愛\n\n郵箱：isumialice@foxmail.com\n\nQQ：1261492496\n\n---\n\n### 部落格大事記\n\n**2020-8-18**\n\n將原程式碼上傳到 source 分支\n由於大部分技術內容都放到 yuque 上了，這個部落格以後就發些胡言亂語吧\n\n**2020-6-17**\n\n重新回到 Hexo + Sakura 的靜態頁面\n\n**2020-4-1**\n\n將技術相關的內容轉移到了 yuque 知識庫上：https://www.yuque.com/isumiai\n\n","updated":"2020-08-18T15:21:04.944Z","path":"about/index.html","_id":"cke03cgpt0011r4k2104fyv6b","comments":1,"layout":"page","content":"<p>社畜, 宅男, 站着尿尿神教教主</p>\n<p>會許多數學的計算機碩士</p>\n<p>圖形學, 高效能運算, 基礎數學, 機器學習</p>\n<p>目前在深圳划水</p>\n<p>前端知識基本為〇, 所以本部落格大部分都是照搬他人的程式碼</p>\n<p>喜歡遊戲, 小說, 甜食, 宇宙, 美少女</p>\n<p>最近愛上了刷馬桶和做三分鐘咖喱</p>\n<p>夢想是和外星美少女戀愛</p>\n<p>郵箱：<a href=\"mailto:isumialice@foxmail.com\" target=\"_blank\" rel=\"noopener\">isumialice@foxmail.com</a></p>\n<p>QQ：1261492496</p>\n<hr>\n<h3 id=\"部落格大事記\"><a href=\"#部落格大事記\" class=\"headerlink\" title=\"部落格大事記\"></a>部落格大事記</h3><p><strong>2020-8-18</strong></p>\n<p>將原程式碼上傳到 source 分支<br>由於大部分技術內容都放到 yuque 上了，這個部落格以後就發些胡言亂語吧</p>\n<p><strong>2020-6-17</strong></p>\n<p>重新回到 Hexo + Sakura 的靜態頁面</p>\n<p><strong>2020-4-1</strong></p>\n<p>將技術相關的內容轉移到了 yuque 知識庫上：<a href=\"https://www.yuque.com/isumiai\" target=\"_blank\" rel=\"noopener\">https://www.yuque.com/isumiai</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>社畜, 宅男, 站着尿尿神教教主</p>\n<p>會許多數學的計算機碩士</p>\n<p>圖形學, 高效能運算, 基礎數學, 機器學習</p>\n<p>目前在深圳划水</p>\n<p>前端知識基本為〇, 所以本部落格大部分都是照搬他人的程式碼</p>\n<p>喜歡遊戲, 小說, 甜食, 宇宙, 美少女</p>\n<p>最近愛上了刷馬桶和做三分鐘咖喱</p>\n<p>夢想是和外星美少女戀愛</p>\n<p>郵箱：<a href=\"mailto:isumialice@foxmail.com\" target=\"_blank\" rel=\"noopener\">isumialice@foxmail.com</a></p>\n<p>QQ：1261492496</p>\n<hr>\n<h3 id=\"部落格大事記\"><a href=\"#部落格大事記\" class=\"headerlink\" title=\"部落格大事記\"></a>部落格大事記</h3><p><strong>2020-8-18</strong></p>\n<p>將原程式碼上傳到 source 分支<br>由於大部分技術內容都放到 yuque 上了，這個部落格以後就發些胡言亂語吧</p>\n<p><strong>2020-6-17</strong></p>\n<p>重新回到 Hexo + Sakura 的靜態頁面</p>\n<p><strong>2020-4-1</strong></p>\n<p>將技術相關的內容轉移到了 yuque 知識庫上：<a href=\"https://www.yuque.com/isumiai\" target=\"_blank\" rel=\"noopener\">https://www.yuque.com/isumiai</a></p>\n"},{"title":"categories","date":"2020-08-18T15:17:29.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"title: categories\ndate: 2020-8-18 23:17:29\ntype: \"categories\"\n---\n","updated":"2020-08-18T15:17:30.074Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cke03cgpv0012r4k2o4vixdib","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"search","comments":0,"type":"search","_content":"","source":"search/index.md","raw":"---\ntitle: search\ncomments: false\ntype: \"search\"\n---\n","date":"2020-08-18T14:44:33.551Z","updated":"2020-08-18T14:38:07.260Z","path":"search/index.html","layout":"page","_id":"cke03cgpw0013r4k23qpqjpk4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-08-18T15:16:56.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2020-8-18 23:16:56\ntype: \"tags\"\n---\n","updated":"2020-08-18T15:16:59.451Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cke03cgpx0014r4k281n82f4x","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Arm PL 環境配置","date":"2020-04-19T13:51:50.000Z","cover":"https://gitee.com/IsumiAlice/IsumiPic/raw/master///20200515204625.jpg","_content":"Arm Performance Libraries 作為 Linux 的 Arm Compiler 的一部分安裝，並且需要 Arm Allinea Studio 許可證\n\n## License\n\nArm Allinea Studio 工具套件為在 Arm 硬體上開發 HPC 應用程式提供了完整的解決方案。 它包括： \n- Arm C/C ++/Fortran 編譯器 \n- ArmPL \n- Arm Forge（Arm DDT，Arm MAP和Arm Performance Reports） \n\n需要許可證來使用這些工具。 有兩種許可證， Named User 和 Floating\n\n在獲得許可證後，按照以下說明將其新增到系統中： \n\n### Add a named user license \n\n1. 在 `/opt/arm/` 目錄中建立一個名為 licenses 的目錄 \n2. 將許可證檔案複製到 `/opt/arm/licenses` 目錄；如果選擇將許可證檔案放在其他位置，則必須將 `ARM_LICENSE_DIR` 環境變數設定為指向它 `export ARM_LICENSE_DIR=/opt/arm/licenses`\n3. Arm Forge 和 Arm Performance Reports 在其特定的安裝目錄中搜索許可證。如果使用的是 Arm Allinea Studio 許可證，並且沒有為這些工具使用單獨的許可證，請設定 `ALLINEA_LICENSE_DIR` 環境變數以將這些工具指向您的 Arm Allinea Studio 許可證 `export ALLINEA_LICENSE_DIR=/opt/arm/licenses >`\n\nnamed user license，無需安裝Arm License Server\n\n### Setting up a floating license \n\n必須下載並安裝 [Arm License Server](https://developer.arm.com/tools-and-software/server-and-hpc/downloads/arm-licence-server) \n\n浮動許可證由伺服器許可證檔案和客戶端許可證檔案組成，在[這裡](https://www.arm.com/products/development-tools/server-and-hpc/allinea-studio/get-software?_ga=2.43607085.960219704.1587365001-756695113.1577670013)申請 \n\n檢查客戶端許可證是否包含執行Arm License Server的計算機的主機名或IP地址 \n\n1. 將客戶端許可證新增到安裝 Arm Allinea Studio 的計算機上。在 `/opt/arm` 目錄中建立一個名為 `licenses` 的目錄 \n2. 同 named \n3. 同 named \n4. 將伺服器許可證檔案新增到安裝 Arm License Server 的計算機上。在 `/opt/arm/licenceserver` 目錄中建立一個名為 `licenses` 的目錄，並將您的許可證檔案複製到該目錄中 \n5. 重新啟動 Arm License Server \n\n## 下載 \n\n[Arm Allinea Studio downloads page](https://developer.arm.com/products/software-development-tools/hpc/arm-allinea-studio/download) \n\n## 安裝 \n\n需要 python >= 2.7\n\n需要 C Libraries：SUSE and RHEL: `glibc-devel` Ubuntu: `libc6-dev` \n\n1. 解壓縮 ``` tar -xvf .tar.gz ``` \n2. ``` cd ``` \n3. 預設配置安裝 ``` sudo ./.sh ``` \n可以自定義 options\n4. 安裝程式將顯示EULA並提示您同意條款 接下來主要介紹 ArmPL 的配置和使用 \n\n\n## 配置 \n1. 檢視可用的環境模組 ``` module avail ``` 可能需要配置MODULEPATH環境變數以包含安裝目錄 ``` export MODULEPATH=$MODULEPATH:/opt/arm/modulefiles/ ``` \n2. 為您使用的編譯器載入適當的模組，如果使用的是用於Linux的Arm Compiler，則建議僅載入編譯器模組，如果使用gcc，則必須載入所需的特定Arm Performance Libraries模組 \n   ``` module load Generic-AArch64/RHEL/7/arm-linux-compiler/20.0 ``` \n   如果使用gcc編譯器，請確保載入正確的模組   \n   ``` module load Generic-AArch64/RHEL/7/gcc-9.2.0/armpl/20.0.0 ```   \n   Tips: 可以考慮將模組載入命令新增到您的.profile中，以在每次登入時自動執行它 \n3. 根據使用的編譯器，使用以下命令檢查環境 \n   | **Compiler** | **Command** |\n   | ------------ | ---------------- |\n   | armclang | `which armclang` |\n   | gcc | `which gcc` |\n\n## 舉個例子 \n\nArmPL 包含許多示例程式，如果是預設安裝的，位置在`/opt/arm//examples/` \n\n這裡以 `fftw_dft_r2c_1d_c_example.c` 為例，具體做什麼就不看了 \n\n編譯和連結的選項： \n-armpl: 與arm編譯器進行編譯和連結時 \n-mcpu = native: 允許編譯器從主機系統推斷要使用的庫 \n-L\\lib: 新增庫搜尋路徑 \n-larmpl_lp64: 連結到Arm Performance Libraries \n-lgfortran: 連結到 gcc Fortran 執行庫 \n-lm: 連結到標準數學庫 \n\n1. 編譯原始碼，生成一個目標檔案 \n   | **Compiler** | **Command** |\n   | ------------ | ------------------------ |\n   | armclang | `armclang -c -armpl -mcpu=native fftw_dft_r2c_1d_c_example.c -o fftw_dft_r2c_1d_c_example.o` |\n   | gcc | `gcc -c -I/include fftw_dft_r2c_1d_c_example.c -o fftw_dft_r2c_1d_c_example.o` |\n2. 將目的碼連結到可執行檔案中 \n   | **Compiler** | **Command** |\n   | ------------ | ------------------------- |\n   | armclang | `armclang fftw_dft_r2c_1d_c_example.o -o fftw_dft_r2c_1d_c_example.exe -armpl -mcpu=native -lm` |\n   | gcc | `gcc fftw_dft_r2c_1d_c_example.o -L/lib -o fftw_dft_r2c_1d_c_example.exe -larmpl_lp64 -lgfortran -lm` |\n3. 在Arm系統上執行可執行檔案 ``` ./fftw_dft_r2c_1d_c_example.exe ``` \n   可以看到相應的輸出 \n\n## Compile and test the examples examples \n\n目錄包含以下內容： \n- 一個GNUmakefile，用於生成和執行所有示例程式 \n- C 原始碼 .c \n- Fortran原始碼 .f90 \n- 每個示例的預期輸出 .expected \n\nMakefile編譯並執行每個示例，然後將生成的輸出與預期的輸出進行比較。任何差異都會標記為錯誤","source":"_posts/Arm-PL.md","raw":"---\ntitle: Arm PL 環境配置\ndate: 2020-04-19 21:51:50\ncategories: \n - 技術\ntags: \n - 數學\n - 高效能運算\ncover: https://gitee.com/IsumiAlice/IsumiPic/raw/master///20200515204625.jpg\n---\nArm Performance Libraries 作為 Linux 的 Arm Compiler 的一部分安裝，並且需要 Arm Allinea Studio 許可證\n\n## License\n\nArm Allinea Studio 工具套件為在 Arm 硬體上開發 HPC 應用程式提供了完整的解決方案。 它包括： \n- Arm C/C ++/Fortran 編譯器 \n- ArmPL \n- Arm Forge（Arm DDT，Arm MAP和Arm Performance Reports） \n\n需要許可證來使用這些工具。 有兩種許可證， Named User 和 Floating\n\n在獲得許可證後，按照以下說明將其新增到系統中： \n\n### Add a named user license \n\n1. 在 `/opt/arm/` 目錄中建立一個名為 licenses 的目錄 \n2. 將許可證檔案複製到 `/opt/arm/licenses` 目錄；如果選擇將許可證檔案放在其他位置，則必須將 `ARM_LICENSE_DIR` 環境變數設定為指向它 `export ARM_LICENSE_DIR=/opt/arm/licenses`\n3. Arm Forge 和 Arm Performance Reports 在其特定的安裝目錄中搜索許可證。如果使用的是 Arm Allinea Studio 許可證，並且沒有為這些工具使用單獨的許可證，請設定 `ALLINEA_LICENSE_DIR` 環境變數以將這些工具指向您的 Arm Allinea Studio 許可證 `export ALLINEA_LICENSE_DIR=/opt/arm/licenses >`\n\nnamed user license，無需安裝Arm License Server\n\n### Setting up a floating license \n\n必須下載並安裝 [Arm License Server](https://developer.arm.com/tools-and-software/server-and-hpc/downloads/arm-licence-server) \n\n浮動許可證由伺服器許可證檔案和客戶端許可證檔案組成，在[這裡](https://www.arm.com/products/development-tools/server-and-hpc/allinea-studio/get-software?_ga=2.43607085.960219704.1587365001-756695113.1577670013)申請 \n\n檢查客戶端許可證是否包含執行Arm License Server的計算機的主機名或IP地址 \n\n1. 將客戶端許可證新增到安裝 Arm Allinea Studio 的計算機上。在 `/opt/arm` 目錄中建立一個名為 `licenses` 的目錄 \n2. 同 named \n3. 同 named \n4. 將伺服器許可證檔案新增到安裝 Arm License Server 的計算機上。在 `/opt/arm/licenceserver` 目錄中建立一個名為 `licenses` 的目錄，並將您的許可證檔案複製到該目錄中 \n5. 重新啟動 Arm License Server \n\n## 下載 \n\n[Arm Allinea Studio downloads page](https://developer.arm.com/products/software-development-tools/hpc/arm-allinea-studio/download) \n\n## 安裝 \n\n需要 python >= 2.7\n\n需要 C Libraries：SUSE and RHEL: `glibc-devel` Ubuntu: `libc6-dev` \n\n1. 解壓縮 ``` tar -xvf .tar.gz ``` \n2. ``` cd ``` \n3. 預設配置安裝 ``` sudo ./.sh ``` \n可以自定義 options\n4. 安裝程式將顯示EULA並提示您同意條款 接下來主要介紹 ArmPL 的配置和使用 \n\n\n## 配置 \n1. 檢視可用的環境模組 ``` module avail ``` 可能需要配置MODULEPATH環境變數以包含安裝目錄 ``` export MODULEPATH=$MODULEPATH:/opt/arm/modulefiles/ ``` \n2. 為您使用的編譯器載入適當的模組，如果使用的是用於Linux的Arm Compiler，則建議僅載入編譯器模組，如果使用gcc，則必須載入所需的特定Arm Performance Libraries模組 \n   ``` module load Generic-AArch64/RHEL/7/arm-linux-compiler/20.0 ``` \n   如果使用gcc編譯器，請確保載入正確的模組   \n   ``` module load Generic-AArch64/RHEL/7/gcc-9.2.0/armpl/20.0.0 ```   \n   Tips: 可以考慮將模組載入命令新增到您的.profile中，以在每次登入時自動執行它 \n3. 根據使用的編譯器，使用以下命令檢查環境 \n   | **Compiler** | **Command** |\n   | ------------ | ---------------- |\n   | armclang | `which armclang` |\n   | gcc | `which gcc` |\n\n## 舉個例子 \n\nArmPL 包含許多示例程式，如果是預設安裝的，位置在`/opt/arm//examples/` \n\n這裡以 `fftw_dft_r2c_1d_c_example.c` 為例，具體做什麼就不看了 \n\n編譯和連結的選項： \n-armpl: 與arm編譯器進行編譯和連結時 \n-mcpu = native: 允許編譯器從主機系統推斷要使用的庫 \n-L\\lib: 新增庫搜尋路徑 \n-larmpl_lp64: 連結到Arm Performance Libraries \n-lgfortran: 連結到 gcc Fortran 執行庫 \n-lm: 連結到標準數學庫 \n\n1. 編譯原始碼，生成一個目標檔案 \n   | **Compiler** | **Command** |\n   | ------------ | ------------------------ |\n   | armclang | `armclang -c -armpl -mcpu=native fftw_dft_r2c_1d_c_example.c -o fftw_dft_r2c_1d_c_example.o` |\n   | gcc | `gcc -c -I/include fftw_dft_r2c_1d_c_example.c -o fftw_dft_r2c_1d_c_example.o` |\n2. 將目的碼連結到可執行檔案中 \n   | **Compiler** | **Command** |\n   | ------------ | ------------------------- |\n   | armclang | `armclang fftw_dft_r2c_1d_c_example.o -o fftw_dft_r2c_1d_c_example.exe -armpl -mcpu=native -lm` |\n   | gcc | `gcc fftw_dft_r2c_1d_c_example.o -L/lib -o fftw_dft_r2c_1d_c_example.exe -larmpl_lp64 -lgfortran -lm` |\n3. 在Arm系統上執行可執行檔案 ``` ./fftw_dft_r2c_1d_c_example.exe ``` \n   可以看到相應的輸出 \n\n## Compile and test the examples examples \n\n目錄包含以下內容： \n- 一個GNUmakefile，用於生成和執行所有示例程式 \n- C 原始碼 .c \n- Fortran原始碼 .f90 \n- 每個示例的預期輸出 .expected \n\nMakefile編譯並執行每個示例，然後將生成的輸出與預期的輸出進行比較。任何差異都會標記為錯誤","slug":"Arm-PL","published":1,"updated":"2020-08-18T15:19:13.467Z","_id":"cke03cgon0000r4k26icwm9ey","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Arm Performance Libraries 作為 Linux 的 Arm Compiler 的一部分安裝，並且需要 Arm Allinea Studio 許可證</p>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><p>Arm Allinea Studio 工具套件為在 Arm 硬體上開發 HPC 應用程式提供了完整的解決方案。 它包括： </p>\n<ul>\n<li>Arm C/C ++/Fortran 編譯器 </li>\n<li>ArmPL </li>\n<li>Arm Forge（Arm DDT，Arm MAP和Arm Performance Reports） </li>\n</ul>\n<p>需要許可證來使用這些工具。 有兩種許可證， Named User 和 Floating</p>\n<p>在獲得許可證後，按照以下說明將其新增到系統中： </p>\n<h3 id=\"Add-a-named-user-license\"><a href=\"#Add-a-named-user-license\" class=\"headerlink\" title=\"Add a named user license\"></a>Add a named user license</h3><ol>\n<li>在 <code>/opt/arm/</code> 目錄中建立一個名為 licenses 的目錄 </li>\n<li>將許可證檔案複製到 <code>/opt/arm/licenses</code> 目錄；如果選擇將許可證檔案放在其他位置，則必須將 <code>ARM_LICENSE_DIR</code> 環境變數設定為指向它 <code>export ARM_LICENSE_DIR=/opt/arm/licenses</code></li>\n<li>Arm Forge 和 Arm Performance Reports 在其特定的安裝目錄中搜索許可證。如果使用的是 Arm Allinea Studio 許可證，並且沒有為這些工具使用單獨的許可證，請設定 <code>ALLINEA_LICENSE_DIR</code> 環境變數以將這些工具指向您的 Arm Allinea Studio 許可證 <code>export ALLINEA_LICENSE_DIR=/opt/arm/licenses &gt;</code></li>\n</ol>\n<p>named user license，無需安裝Arm License Server</p>\n<h3 id=\"Setting-up-a-floating-license\"><a href=\"#Setting-up-a-floating-license\" class=\"headerlink\" title=\"Setting up a floating license\"></a>Setting up a floating license</h3><p>必須下載並安裝 <a href=\"https://developer.arm.com/tools-and-software/server-and-hpc/downloads/arm-licence-server\" target=\"_blank\" rel=\"noopener\">Arm License Server</a> </p>\n<p>浮動許可證由伺服器許可證檔案和客戶端許可證檔案組成，在<a href=\"https://www.arm.com/products/development-tools/server-and-hpc/allinea-studio/get-software?_ga=2.43607085.960219704.1587365001-756695113.1577670013\" target=\"_blank\" rel=\"noopener\">這裡</a>申請 </p>\n<p>檢查客戶端許可證是否包含執行Arm License Server的計算機的主機名或IP地址 </p>\n<ol>\n<li>將客戶端許可證新增到安裝 Arm Allinea Studio 的計算機上。在 <code>/opt/arm</code> 目錄中建立一個名為 <code>licenses</code> 的目錄 </li>\n<li>同 named </li>\n<li>同 named </li>\n<li>將伺服器許可證檔案新增到安裝 Arm License Server 的計算機上。在 <code>/opt/arm/licenceserver</code> 目錄中建立一個名為 <code>licenses</code> 的目錄，並將您的許可證檔案複製到該目錄中 </li>\n<li>重新啟動 Arm License Server </li>\n</ol>\n<h2 id=\"下載\"><a href=\"#下載\" class=\"headerlink\" title=\"下載\"></a>下載</h2><p><a href=\"https://developer.arm.com/products/software-development-tools/hpc/arm-allinea-studio/download\" target=\"_blank\" rel=\"noopener\">Arm Allinea Studio downloads page</a> </p>\n<h2 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h2><p>需要 python &gt;= 2.7</p>\n<p>需要 C Libraries：SUSE and RHEL: <code>glibc-devel</code> Ubuntu: <code>libc6-dev</code> </p>\n<ol>\n<li>解壓縮 <code>tar -xvf .tar.gz</code> </li>\n<li><code>cd</code> </li>\n<li>預設配置安裝 <code>sudo ./.sh</code><br>可以自定義 options</li>\n<li>安裝程式將顯示EULA並提示您同意條款 接下來主要介紹 ArmPL 的配置和使用 </li>\n</ol>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><ol>\n<li>檢視可用的環境模組 <code>module avail</code> 可能需要配置MODULEPATH環境變數以包含安裝目錄 <code>export MODULEPATH=$MODULEPATH:/opt/arm/modulefiles/</code> </li>\n<li>為您使用的編譯器載入適當的模組，如果使用的是用於Linux的Arm Compiler，則建議僅載入編譯器模組，如果使用gcc，則必須載入所需的特定Arm Performance Libraries模組<br><code>module load Generic-AArch64/RHEL/7/arm-linux-compiler/20.0</code><br>如果使用gcc編譯器，請確保載入正確的模組<br><code>module load Generic-AArch64/RHEL/7/gcc-9.2.0/armpl/20.0.0</code><br>Tips: 可以考慮將模組載入命令新增到您的.profile中，以在每次登入時自動執行它 </li>\n<li>根據使用的編譯器，使用以下命令檢查環境<br>| <strong>Compiler</strong> | <strong>Command</strong> |<br>| ———— | —————- |<br>| armclang | <code>which armclang</code> |<br>| gcc | <code>which gcc</code> |</li>\n</ol>\n<h2 id=\"舉個例子\"><a href=\"#舉個例子\" class=\"headerlink\" title=\"舉個例子\"></a>舉個例子</h2><p>ArmPL 包含許多示例程式，如果是預設安裝的，位置在<code>/opt/arm//examples/</code> </p>\n<p>這裡以 <code>fftw_dft_r2c_1d_c_example.c</code> 為例，具體做什麼就不看了 </p>\n<p>編譯和連結的選項：<br>-armpl: 與arm編譯器進行編譯和連結時<br>-mcpu = native: 允許編譯器從主機系統推斷要使用的庫<br>-L\\lib: 新增庫搜尋路徑<br>-larmpl_lp64: 連結到Arm Performance Libraries<br>-lgfortran: 連結到 gcc Fortran 執行庫<br>-lm: 連結到標準數學庫 </p>\n<ol>\n<li>編譯原始碼，生成一個目標檔案<br>| <strong>Compiler</strong> | <strong>Command</strong> |<br>| ———— | ———————— |<br>| armclang | <code>armclang -c -armpl -mcpu=native fftw_dft_r2c_1d_c_example.c -o fftw_dft_r2c_1d_c_example.o</code> |<br>| gcc | <code>gcc -c -I/include fftw_dft_r2c_1d_c_example.c -o fftw_dft_r2c_1d_c_example.o</code> |</li>\n<li>將目的碼連結到可執行檔案中<br>| <strong>Compiler</strong> | <strong>Command</strong> |<br>| ———— | ————————- |<br>| armclang | <code>armclang fftw_dft_r2c_1d_c_example.o -o fftw_dft_r2c_1d_c_example.exe -armpl -mcpu=native -lm</code> |<br>| gcc | <code>gcc fftw_dft_r2c_1d_c_example.o -L/lib -o fftw_dft_r2c_1d_c_example.exe -larmpl_lp64 -lgfortran -lm</code> |</li>\n<li>在Arm系統上執行可執行檔案 <code>./fftw_dft_r2c_1d_c_example.exe</code><br>可以看到相應的輸出 </li>\n</ol>\n<h2 id=\"Compile-and-test-the-examples-examples\"><a href=\"#Compile-and-test-the-examples-examples\" class=\"headerlink\" title=\"Compile and test the examples examples\"></a>Compile and test the examples examples</h2><p>目錄包含以下內容： </p>\n<ul>\n<li>一個GNUmakefile，用於生成和執行所有示例程式 </li>\n<li>C 原始碼 .c </li>\n<li>Fortran原始碼 .f90 </li>\n<li>每個示例的預期輸出 .expected </li>\n</ul>\n<p>Makefile編譯並執行每個示例，然後將生成的輸出與預期的輸出進行比較。任何差異都會標記為錯誤</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Arm Performance Libraries 作為 Linux 的 Arm Compiler 的一部分安裝，並且需要 Arm Allinea Studio 許可證</p>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><p>Arm Allinea Studio 工具套件為在 Arm 硬體上開發 HPC 應用程式提供了完整的解決方案。 它包括： </p>\n<ul>\n<li>Arm C/C ++/Fortran 編譯器 </li>\n<li>ArmPL </li>\n<li>Arm Forge（Arm DDT，Arm MAP和Arm Performance Reports） </li>\n</ul>\n<p>需要許可證來使用這些工具。 有兩種許可證， Named User 和 Floating</p>\n<p>在獲得許可證後，按照以下說明將其新增到系統中： </p>\n<h3 id=\"Add-a-named-user-license\"><a href=\"#Add-a-named-user-license\" class=\"headerlink\" title=\"Add a named user license\"></a>Add a named user license</h3><ol>\n<li>在 <code>/opt/arm/</code> 目錄中建立一個名為 licenses 的目錄 </li>\n<li>將許可證檔案複製到 <code>/opt/arm/licenses</code> 目錄；如果選擇將許可證檔案放在其他位置，則必須將 <code>ARM_LICENSE_DIR</code> 環境變數設定為指向它 <code>export ARM_LICENSE_DIR=/opt/arm/licenses</code></li>\n<li>Arm Forge 和 Arm Performance Reports 在其特定的安裝目錄中搜索許可證。如果使用的是 Arm Allinea Studio 許可證，並且沒有為這些工具使用單獨的許可證，請設定 <code>ALLINEA_LICENSE_DIR</code> 環境變數以將這些工具指向您的 Arm Allinea Studio 許可證 <code>export ALLINEA_LICENSE_DIR=/opt/arm/licenses &gt;</code></li>\n</ol>\n<p>named user license，無需安裝Arm License Server</p>\n<h3 id=\"Setting-up-a-floating-license\"><a href=\"#Setting-up-a-floating-license\" class=\"headerlink\" title=\"Setting up a floating license\"></a>Setting up a floating license</h3><p>必須下載並安裝 <a href=\"https://developer.arm.com/tools-and-software/server-and-hpc/downloads/arm-licence-server\" target=\"_blank\" rel=\"noopener\">Arm License Server</a> </p>\n<p>浮動許可證由伺服器許可證檔案和客戶端許可證檔案組成，在<a href=\"https://www.arm.com/products/development-tools/server-and-hpc/allinea-studio/get-software?_ga=2.43607085.960219704.1587365001-756695113.1577670013\" target=\"_blank\" rel=\"noopener\">這裡</a>申請 </p>\n<p>檢查客戶端許可證是否包含執行Arm License Server的計算機的主機名或IP地址 </p>\n<ol>\n<li>將客戶端許可證新增到安裝 Arm Allinea Studio 的計算機上。在 <code>/opt/arm</code> 目錄中建立一個名為 <code>licenses</code> 的目錄 </li>\n<li>同 named </li>\n<li>同 named </li>\n<li>將伺服器許可證檔案新增到安裝 Arm License Server 的計算機上。在 <code>/opt/arm/licenceserver</code> 目錄中建立一個名為 <code>licenses</code> 的目錄，並將您的許可證檔案複製到該目錄中 </li>\n<li>重新啟動 Arm License Server </li>\n</ol>\n<h2 id=\"下載\"><a href=\"#下載\" class=\"headerlink\" title=\"下載\"></a>下載</h2><p><a href=\"https://developer.arm.com/products/software-development-tools/hpc/arm-allinea-studio/download\" target=\"_blank\" rel=\"noopener\">Arm Allinea Studio downloads page</a> </p>\n<h2 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h2><p>需要 python &gt;= 2.7</p>\n<p>需要 C Libraries：SUSE and RHEL: <code>glibc-devel</code> Ubuntu: <code>libc6-dev</code> </p>\n<ol>\n<li>解壓縮 <code>tar -xvf .tar.gz</code> </li>\n<li><code>cd</code> </li>\n<li>預設配置安裝 <code>sudo ./.sh</code><br>可以自定義 options</li>\n<li>安裝程式將顯示EULA並提示您同意條款 接下來主要介紹 ArmPL 的配置和使用 </li>\n</ol>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><ol>\n<li>檢視可用的環境模組 <code>module avail</code> 可能需要配置MODULEPATH環境變數以包含安裝目錄 <code>export MODULEPATH=$MODULEPATH:/opt/arm/modulefiles/</code> </li>\n<li>為您使用的編譯器載入適當的模組，如果使用的是用於Linux的Arm Compiler，則建議僅載入編譯器模組，如果使用gcc，則必須載入所需的特定Arm Performance Libraries模組<br><code>module load Generic-AArch64/RHEL/7/arm-linux-compiler/20.0</code><br>如果使用gcc編譯器，請確保載入正確的模組<br><code>module load Generic-AArch64/RHEL/7/gcc-9.2.0/armpl/20.0.0</code><br>Tips: 可以考慮將模組載入命令新增到您的.profile中，以在每次登入時自動執行它 </li>\n<li>根據使用的編譯器，使用以下命令檢查環境<br>| <strong>Compiler</strong> | <strong>Command</strong> |<br>| ———— | —————- |<br>| armclang | <code>which armclang</code> |<br>| gcc | <code>which gcc</code> |</li>\n</ol>\n<h2 id=\"舉個例子\"><a href=\"#舉個例子\" class=\"headerlink\" title=\"舉個例子\"></a>舉個例子</h2><p>ArmPL 包含許多示例程式，如果是預設安裝的，位置在<code>/opt/arm//examples/</code> </p>\n<p>這裡以 <code>fftw_dft_r2c_1d_c_example.c</code> 為例，具體做什麼就不看了 </p>\n<p>編譯和連結的選項：<br>-armpl: 與arm編譯器進行編譯和連結時<br>-mcpu = native: 允許編譯器從主機系統推斷要使用的庫<br>-L\\lib: 新增庫搜尋路徑<br>-larmpl_lp64: 連結到Arm Performance Libraries<br>-lgfortran: 連結到 gcc Fortran 執行庫<br>-lm: 連結到標準數學庫 </p>\n<ol>\n<li>編譯原始碼，生成一個目標檔案<br>| <strong>Compiler</strong> | <strong>Command</strong> |<br>| ———— | ———————— |<br>| armclang | <code>armclang -c -armpl -mcpu=native fftw_dft_r2c_1d_c_example.c -o fftw_dft_r2c_1d_c_example.o</code> |<br>| gcc | <code>gcc -c -I/include fftw_dft_r2c_1d_c_example.c -o fftw_dft_r2c_1d_c_example.o</code> |</li>\n<li>將目的碼連結到可執行檔案中<br>| <strong>Compiler</strong> | <strong>Command</strong> |<br>| ———— | ————————- |<br>| armclang | <code>armclang fftw_dft_r2c_1d_c_example.o -o fftw_dft_r2c_1d_c_example.exe -armpl -mcpu=native -lm</code> |<br>| gcc | <code>gcc fftw_dft_r2c_1d_c_example.o -L/lib -o fftw_dft_r2c_1d_c_example.exe -larmpl_lp64 -lgfortran -lm</code> |</li>\n<li>在Arm系統上執行可執行檔案 <code>./fftw_dft_r2c_1d_c_example.exe</code><br>可以看到相應的輸出 </li>\n</ol>\n<h2 id=\"Compile-and-test-the-examples-examples\"><a href=\"#Compile-and-test-the-examples-examples\" class=\"headerlink\" title=\"Compile and test the examples examples\"></a>Compile and test the examples examples</h2><p>目錄包含以下內容： </p>\n<ul>\n<li>一個GNUmakefile，用於生成和執行所有示例程式 </li>\n<li>C 原始碼 .c </li>\n<li>Fortran原始碼 .f90 </li>\n<li>每個示例的預期輸出 .expected </li>\n</ul>\n<p>Makefile編譯並執行每個示例，然後將生成的輸出與預期的輸出進行比較。任何差異都會標記為錯誤</p>\n"},{"title":"Raspberry 配置 ASF","author":"死体菌","avatar":"https://gitee.com/IsumiAlice/IsumiPic/raw/master/2005/20200616222058.jpg","date":"2020-03-04T12:10:48.000Z","comments":1,"keywords":"Raspberry","description":"Raspberry 配置 ASF","cover":"https://gitee.com/IsumiAlice/IsumiPic/raw/master///20200515204625.jpg","_content":"首先在國內網路下要保證配置好了代理服務 (參見之前的 Raspberry Hello)\n\nASF Git 頁面: https://github.com/JustArchiNET/ArchiSteamFarm\n\nSetting up 頁面: https://github.com/JustArchiNET/ArchiSteamFarm/wiki/Setting-up-zh-CN\n\n在 release 頁面下載相應壓縮檔, 一般來說選 linux-arm\n\n# 安裝相關依賴\n\n套件名稱取決於您正在使用的 Linux 發行版，我們已經列出了最常見的套件。 您可以使用本地套件管理系統，為您的作業系統取得全部套件（例如 Debian 的 `apt` 或 CentOS 的 `yum`）。\n\n- `libcurl`（`libcurl4`、`libcurl3`）\n- `libicu`（您的 Linux 發行版的最新版本，例如 `libicu60`）\n- `libkrb5-3`（`krb5-libs`）\n- `liblttng-ust0`（`lttng-ust`）\n- `libssl`（`libssl1.1`、`openssl-libs`、您的 Linux 發行版最新的 1.1.X 版本）\n- `zlib1g`（`zlib`）\n\n其中至少應該有幾個套件已經可用於您的系統本地了（例如現今幾乎每一個 Linux 發行版都需要 `zlib1g`）。\n\n# 配置\n\n在 **[網頁設定檔產生器](https://justarchinet.github.io/ASF-WebConfigGenerator)** 頁面配置一個 ASF 和一個 Bot\n\n然後放入 config 資料夾中\n\n修改權限 `` chmod +x ArchiSteamFarm ``\n\n然後 ``./ArchiSteamFarm `` 執行\n\n若需要代理則在前面添加 ``proxychains``\n\n","source":"_posts/Raspberry-ASF.md","raw":"---\ntitle: Raspberry 配置 ASF\nauthor: 死体菌\navatar: https://gitee.com/IsumiAlice/IsumiPic/raw/master/2005/20200616222058.jpg\ncategories: 技術\ndate: 2020-03-04 20:10:48\ncomments: true\ntags: \n - 樹莓派\nkeywords: Raspberry\ndescription: Raspberry 配置 ASF\ncover: https://gitee.com/IsumiAlice/IsumiPic/raw/master///20200515204625.jpg\n---\n首先在國內網路下要保證配置好了代理服務 (參見之前的 Raspberry Hello)\n\nASF Git 頁面: https://github.com/JustArchiNET/ArchiSteamFarm\n\nSetting up 頁面: https://github.com/JustArchiNET/ArchiSteamFarm/wiki/Setting-up-zh-CN\n\n在 release 頁面下載相應壓縮檔, 一般來說選 linux-arm\n\n# 安裝相關依賴\n\n套件名稱取決於您正在使用的 Linux 發行版，我們已經列出了最常見的套件。 您可以使用本地套件管理系統，為您的作業系統取得全部套件（例如 Debian 的 `apt` 或 CentOS 的 `yum`）。\n\n- `libcurl`（`libcurl4`、`libcurl3`）\n- `libicu`（您的 Linux 發行版的最新版本，例如 `libicu60`）\n- `libkrb5-3`（`krb5-libs`）\n- `liblttng-ust0`（`lttng-ust`）\n- `libssl`（`libssl1.1`、`openssl-libs`、您的 Linux 發行版最新的 1.1.X 版本）\n- `zlib1g`（`zlib`）\n\n其中至少應該有幾個套件已經可用於您的系統本地了（例如現今幾乎每一個 Linux 發行版都需要 `zlib1g`）。\n\n# 配置\n\n在 **[網頁設定檔產生器](https://justarchinet.github.io/ASF-WebConfigGenerator)** 頁面配置一個 ASF 和一個 Bot\n\n然後放入 config 資料夾中\n\n修改權限 `` chmod +x ArchiSteamFarm ``\n\n然後 ``./ArchiSteamFarm `` 執行\n\n若需要代理則在前面添加 ``proxychains``\n\n","slug":"Raspberry-ASF","published":1,"updated":"2020-08-18T15:19:55.351Z","_id":"cke03cgor0001r4k224nn8945","layout":"post","photos":[],"link":"","content":"<p>首先在國內網路下要保證配置好了代理服務 (參見之前的 Raspberry Hello)</p>\n<p>ASF Git 頁面: <a href=\"https://github.com/JustArchiNET/ArchiSteamFarm\" target=\"_blank\" rel=\"noopener\">https://github.com/JustArchiNET/ArchiSteamFarm</a></p>\n<p>Setting up 頁面: <a href=\"https://github.com/JustArchiNET/ArchiSteamFarm/wiki/Setting-up-zh-CN\" target=\"_blank\" rel=\"noopener\">https://github.com/JustArchiNET/ArchiSteamFarm/wiki/Setting-up-zh-CN</a></p>\n<p>在 release 頁面下載相應壓縮檔, 一般來說選 linux-arm</p>\n<h1 id=\"安裝相關依賴\"><a href=\"#安裝相關依賴\" class=\"headerlink\" title=\"安裝相關依賴\"></a>安裝相關依賴</h1><p>套件名稱取決於您正在使用的 Linux 發行版，我們已經列出了最常見的套件。 您可以使用本地套件管理系統，為您的作業系統取得全部套件（例如 Debian 的 <code>apt</code> 或 CentOS 的 <code>yum</code>）。</p>\n<ul>\n<li><code>libcurl</code>（<code>libcurl4</code>、<code>libcurl3</code>）</li>\n<li><code>libicu</code>（您的 Linux 發行版的最新版本，例如 <code>libicu60</code>）</li>\n<li><code>libkrb5-3</code>（<code>krb5-libs</code>）</li>\n<li><code>liblttng-ust0</code>（<code>lttng-ust</code>）</li>\n<li><code>libssl</code>（<code>libssl1.1</code>、<code>openssl-libs</code>、您的 Linux 發行版最新的 1.1.X 版本）</li>\n<li><code>zlib1g</code>（<code>zlib</code>）</li>\n</ul>\n<p>其中至少應該有幾個套件已經可用於您的系統本地了（例如現今幾乎每一個 Linux 發行版都需要 <code>zlib1g</code>）。</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>在 <strong><a href=\"https://justarchinet.github.io/ASF-WebConfigGenerator\" target=\"_blank\" rel=\"noopener\">網頁設定檔產生器</a></strong> 頁面配置一個 ASF 和一個 Bot</p>\n<p>然後放入 config 資料夾中</p>\n<p>修改權限 <code>chmod +x ArchiSteamFarm</code></p>\n<p>然後 <code>./ArchiSteamFarm</code> 執行</p>\n<p>若需要代理則在前面添加 <code>proxychains</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先在國內網路下要保證配置好了代理服務 (參見之前的 Raspberry Hello)</p>\n<p>ASF Git 頁面: <a href=\"https://github.com/JustArchiNET/ArchiSteamFarm\" target=\"_blank\" rel=\"noopener\">https://github.com/JustArchiNET/ArchiSteamFarm</a></p>\n<p>Setting up 頁面: <a href=\"https://github.com/JustArchiNET/ArchiSteamFarm/wiki/Setting-up-zh-CN\" target=\"_blank\" rel=\"noopener\">https://github.com/JustArchiNET/ArchiSteamFarm/wiki/Setting-up-zh-CN</a></p>\n<p>在 release 頁面下載相應壓縮檔, 一般來說選 linux-arm</p>\n<h1 id=\"安裝相關依賴\"><a href=\"#安裝相關依賴\" class=\"headerlink\" title=\"安裝相關依賴\"></a>安裝相關依賴</h1><p>套件名稱取決於您正在使用的 Linux 發行版，我們已經列出了最常見的套件。 您可以使用本地套件管理系統，為您的作業系統取得全部套件（例如 Debian 的 <code>apt</code> 或 CentOS 的 <code>yum</code>）。</p>\n<ul>\n<li><code>libcurl</code>（<code>libcurl4</code>、<code>libcurl3</code>）</li>\n<li><code>libicu</code>（您的 Linux 發行版的最新版本，例如 <code>libicu60</code>）</li>\n<li><code>libkrb5-3</code>（<code>krb5-libs</code>）</li>\n<li><code>liblttng-ust0</code>（<code>lttng-ust</code>）</li>\n<li><code>libssl</code>（<code>libssl1.1</code>、<code>openssl-libs</code>、您的 Linux 發行版最新的 1.1.X 版本）</li>\n<li><code>zlib1g</code>（<code>zlib</code>）</li>\n</ul>\n<p>其中至少應該有幾個套件已經可用於您的系統本地了（例如現今幾乎每一個 Linux 發行版都需要 <code>zlib1g</code>）。</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>在 <strong><a href=\"https://justarchinet.github.io/ASF-WebConfigGenerator\" target=\"_blank\" rel=\"noopener\">網頁設定檔產生器</a></strong> 頁面配置一個 ASF 和一個 Bot</p>\n<p>然後放入 config 資料夾中</p>\n<p>修改權限 <code>chmod +x ArchiSteamFarm</code></p>\n<p>然後 <code>./ArchiSteamFarm</code> 執行</p>\n<p>若需要代理則在前面添加 <code>proxychains</code></p>\n"},{"title":"Steam 藝術作品展示欄設定","date":"2020-01-27T03:06:55.000Z","author":"死体菌","avatar":"https://gitee.com/IsumiAlice/IsumiPic/raw/master/2005/20200616222058.jpg","comments":1,"keywords":"Steam","description":"Steam 藝術作品展示欄設定","cover":"https://gitee.com/IsumiAlice/IsumiPic/raw/master///20200515204625.jpg","_content":"## 分割個人資料背景\n\nhttps://steam.design/\n\n## 瀏覽器中上傳藝術作品\n\n選擇圖片 - F12 - Console\n\n```\nvar num= document.getElementsByName(\"image_width\")[0].value;\ndocument.getElementsByName(\"image_height\")[0].value = num-(num-1);\ndocument.getElementsByName(\"image_width\")[0].value= num*100;\n```\n\n然後上傳圖片\n\n## 上傳到熒幕截圖展櫃\n\n```\ndocument.getElementsByName(\"file_type\")[0].value= 5;\nvar num= document.getElementsByName(\"image_width\")[0].value;\ndocument.getElementsByName(\"image_height\")[0].value = num-(num-1);\ndocument.getElementsByName(\"image_width\")[0].value= num*100;\n```","source":"_posts/Steam-bg.md","raw":"---\ntitle: Steam 藝術作品展示欄設定\ndate: 2020-01-27 11:06:55\nauthor: 死体菌\navatar: https://gitee.com/IsumiAlice/IsumiPic/raw/master/2005/20200616222058.jpg\ncategories: 技術\ncomments: true\ntags: \n - 遊戲\nkeywords: Steam\ndescription: Steam 藝術作品展示欄設定\ncover:  https://gitee.com/IsumiAlice/IsumiPic/raw/master///20200515204625.jpg\n---\n## 分割個人資料背景\n\nhttps://steam.design/\n\n## 瀏覽器中上傳藝術作品\n\n選擇圖片 - F12 - Console\n\n```\nvar num= document.getElementsByName(\"image_width\")[0].value;\ndocument.getElementsByName(\"image_height\")[0].value = num-(num-1);\ndocument.getElementsByName(\"image_width\")[0].value= num*100;\n```\n\n然後上傳圖片\n\n## 上傳到熒幕截圖展櫃\n\n```\ndocument.getElementsByName(\"file_type\")[0].value= 5;\nvar num= document.getElementsByName(\"image_width\")[0].value;\ndocument.getElementsByName(\"image_height\")[0].value = num-(num-1);\ndocument.getElementsByName(\"image_width\")[0].value= num*100;\n```","slug":"Steam-bg","published":1,"updated":"2020-08-18T15:20:07.162Z","_id":"cke03cgow0004r4k2riyfs3ka","layout":"post","photos":[],"link":"","content":"<h2 id=\"分割個人資料背景\"><a href=\"#分割個人資料背景\" class=\"headerlink\" title=\"分割個人資料背景\"></a>分割個人資料背景</h2><p><a href=\"https://steam.design/\" target=\"_blank\" rel=\"noopener\">https://steam.design/</a></p>\n<h2 id=\"瀏覽器中上傳藝術作品\"><a href=\"#瀏覽器中上傳藝術作品\" class=\"headerlink\" title=\"瀏覽器中上傳藝術作品\"></a>瀏覽器中上傳藝術作品</h2><p>選擇圖片 - F12 - Console</p>\n<pre><code>var num= document.getElementsByName(&quot;image_width&quot;)[0].value;\ndocument.getElementsByName(&quot;image_height&quot;)[0].value = num-(num-1);\ndocument.getElementsByName(&quot;image_width&quot;)[0].value= num*100;\n</code></pre><p>然後上傳圖片</p>\n<h2 id=\"上傳到熒幕截圖展櫃\"><a href=\"#上傳到熒幕截圖展櫃\" class=\"headerlink\" title=\"上傳到熒幕截圖展櫃\"></a>上傳到熒幕截圖展櫃</h2><pre><code>document.getElementsByName(&quot;file_type&quot;)[0].value= 5;\nvar num= document.getElementsByName(&quot;image_width&quot;)[0].value;\ndocument.getElementsByName(&quot;image_height&quot;)[0].value = num-(num-1);\ndocument.getElementsByName(&quot;image_width&quot;)[0].value= num*100;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"分割個人資料背景\"><a href=\"#分割個人資料背景\" class=\"headerlink\" title=\"分割個人資料背景\"></a>分割個人資料背景</h2><p><a href=\"https://steam.design/\" target=\"_blank\" rel=\"noopener\">https://steam.design/</a></p>\n<h2 id=\"瀏覽器中上傳藝術作品\"><a href=\"#瀏覽器中上傳藝術作品\" class=\"headerlink\" title=\"瀏覽器中上傳藝術作品\"></a>瀏覽器中上傳藝術作品</h2><p>選擇圖片 - F12 - Console</p>\n<pre><code>var num= document.getElementsByName(&quot;image_width&quot;)[0].value;\ndocument.getElementsByName(&quot;image_height&quot;)[0].value = num-(num-1);\ndocument.getElementsByName(&quot;image_width&quot;)[0].value= num*100;\n</code></pre><p>然後上傳圖片</p>\n<h2 id=\"上傳到熒幕截圖展櫃\"><a href=\"#上傳到熒幕截圖展櫃\" class=\"headerlink\" title=\"上傳到熒幕截圖展櫃\"></a>上傳到熒幕截圖展櫃</h2><pre><code>document.getElementsByName(&quot;file_type&quot;)[0].value= 5;\nvar num= document.getElementsByName(&quot;image_width&quot;)[0].value;\ndocument.getElementsByName(&quot;image_height&quot;)[0].value = num-(num-1);\ndocument.getElementsByName(&quot;image_width&quot;)[0].value= num*100;\n</code></pre>"},{"title":"一道情人節的密碼題","date":"2018-08-17T11:18:12.000Z","author":"死体菌","avatar":"https://gitee.com/IsumiAlice/IsumiPic/raw/master/2005/20200616222058.jpg","comments":1,"keywords":"密碼","description":"今天是七夕呢，寫這個的起因是一個同學的女朋友發了個密碼解密給他。","cover":"https://gitee.com/IsumiAlice/IsumiPic/raw/master///20200515204625.jpg","_content":"## 七夕快樂哦\n今天是七夕呢，寫這個的起因是一個同學的女朋友發了個密碼解密給他。\n![](https://raw.githubusercontent.com/IsumiAlice/IsumiPic/master/20200410231059.jpg)\n這就是今天要解決的問題嘍，當然，先把兩種密碼的相關知識貼上。\n\n\n## 凱撒密碼\n在[密碼學](https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%AD%A6 \"密碼學\")中，**愷撒密碼**（英語：Caesar cipher），或稱**愷撒加密**、**愷撒變換**、**變換加密**，是一種最簡單且最廣為人知的加密技術。它是一種[替換加密](https://zh.wikipedia.org/wiki/%E6%9B%BF%E6%8D%A2%E5%BC%8F%E5%AF%86%E7%A0%81 \"替換式密碼\")的技術，[明文](https://zh.wikipedia.org/wiki/%E6%98%8E%E6%96%87 \"明文\")中的所有字母都在[字母表](https://zh.wikipedia.org/wiki/%E5%AD%97%E6%AF%8D%E8%A1%A8 \"字母表\")上向後（或向前）按照一個固定數目進行偏移後被替換成[密文](https://zh.wikipedia.org/wiki/%E5%AF%86%E6%96%87 \"密文\")。例如，當偏移量是3的時候，所有的字母A將被替換成D，B變成E，以此類推。這個加密方法是以[羅馬共和](https://zh.wikipedia.org/wiki/%E7%BE%85%E9%A6%AC%E5%85%B1%E5%92%8C \"羅馬共和\")時期[愷撒](https://zh.wikipedia.org/wiki/%E6%81%BA%E6%92%92 \"愷撒\")的名字命名的，當年愷撒曾用此方法與其將軍們進行聯繫。\n\n愷撒密碼通常被作為其他更複雜的加密方法中的一個步驟，例如[維吉尼亞密碼](https://zh.wikipedia.org/wiki/%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81 \"維吉尼亞密碼\")。愷撒密碼還在現代的[ROT13](https://zh.wikipedia.org/wiki/ROT13 \"ROT13\")系統中被應用。但是和所有的利用字母表進行替換的加密技術一樣，愷撒密碼非常容易被破解，而且在實際應用中也無法保證通信安全。\n\n## 柵欄密碼\n所謂柵欄[密碼](https://www.itsfun.com.tw/%E5%AF%86%E7%A2%BC/wiki-8783265-8437835)，就是把要加密的明文分成N個一組，然後把每組的第i個字連起來，形成一段無規律的話。\n\n一般比較常見的是2欄的棚欄密碼。\n比如明文：THERE IS A CIPHER\n去掉空格後變為：THEREISACIPHER\n兩個一組，得到：TH ER EI SA CI PH ER\n先取出第一個字母：TEESCPE\n再取出第二個字母：HRIAIHR\n連在一起就是：TEESCPEHRIAIHR\n這樣就得到我們需要的密碼了！\n\n而解密的時候，我們先吧[密文](https://www.itsfun.com.tw/%E5%AF%86%E6%96%87/wiki-4343875-4728655)從中間分開，變為兩行：\nT E E S C P E\nH R I A I H R\n再按上下上下的順序組合起來：\nTHEREISACIPHER\n分出[空格](https://www.itsfun.com.tw/%E7%A9%BA%E6%A0%BC/wiki-1130465-5262045)，就可以得到原文了：\nTHERE IS A CIPHER\n\n## Python 簡單實現\n十幾行代碼，非常簡單。\n後面的 for 循環部分應該還能再簡化一點。\n```python\nimport math\ninp = 'cvpgygppjvtgpgfgjgtq'\nnum = -2\nstep1 = [chr(97 + (ord(x)-97+num)%26) for x in inp]\nprint (step1)\n\nnum2 = 3\nnum3 = math.ceil(len(step1)/num2)\ns2 = [step1[i*num3: (num3*(i+1)) if (num3*(i+1))<len(step1) else len(step1)] for i in range(num2)]\nprint(s2)\ns3 = []\nfor j in range(num3):\n    for i in range(num2):\n        try:\n            s3.append(s2[i][j])\n        except:\n            pass\nprint (s3)\n'''\nand then there were none\n'''\n```","source":"_posts/Valentine-pw.md","raw":"---\ntitle: 一道情人節的密碼題\ndate: 2018-08-17 19:18:12\nauthor: 死体菌\navatar: https://gitee.com/IsumiAlice/IsumiPic/raw/master/2005/20200616222058.jpg\ncategories: 技術\ncomments: true\ntags: \nkeywords: 密碼\ndescription: 今天是七夕呢，寫這個的起因是一個同學的女朋友發了個密碼解密給他。\ncover: https://gitee.com/IsumiAlice/IsumiPic/raw/master///20200515204625.jpg\n---\n## 七夕快樂哦\n今天是七夕呢，寫這個的起因是一個同學的女朋友發了個密碼解密給他。\n![](https://raw.githubusercontent.com/IsumiAlice/IsumiPic/master/20200410231059.jpg)\n這就是今天要解決的問題嘍，當然，先把兩種密碼的相關知識貼上。\n\n\n## 凱撒密碼\n在[密碼學](https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%AD%A6 \"密碼學\")中，**愷撒密碼**（英語：Caesar cipher），或稱**愷撒加密**、**愷撒變換**、**變換加密**，是一種最簡單且最廣為人知的加密技術。它是一種[替換加密](https://zh.wikipedia.org/wiki/%E6%9B%BF%E6%8D%A2%E5%BC%8F%E5%AF%86%E7%A0%81 \"替換式密碼\")的技術，[明文](https://zh.wikipedia.org/wiki/%E6%98%8E%E6%96%87 \"明文\")中的所有字母都在[字母表](https://zh.wikipedia.org/wiki/%E5%AD%97%E6%AF%8D%E8%A1%A8 \"字母表\")上向後（或向前）按照一個固定數目進行偏移後被替換成[密文](https://zh.wikipedia.org/wiki/%E5%AF%86%E6%96%87 \"密文\")。例如，當偏移量是3的時候，所有的字母A將被替換成D，B變成E，以此類推。這個加密方法是以[羅馬共和](https://zh.wikipedia.org/wiki/%E7%BE%85%E9%A6%AC%E5%85%B1%E5%92%8C \"羅馬共和\")時期[愷撒](https://zh.wikipedia.org/wiki/%E6%81%BA%E6%92%92 \"愷撒\")的名字命名的，當年愷撒曾用此方法與其將軍們進行聯繫。\n\n愷撒密碼通常被作為其他更複雜的加密方法中的一個步驟，例如[維吉尼亞密碼](https://zh.wikipedia.org/wiki/%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81 \"維吉尼亞密碼\")。愷撒密碼還在現代的[ROT13](https://zh.wikipedia.org/wiki/ROT13 \"ROT13\")系統中被應用。但是和所有的利用字母表進行替換的加密技術一樣，愷撒密碼非常容易被破解，而且在實際應用中也無法保證通信安全。\n\n## 柵欄密碼\n所謂柵欄[密碼](https://www.itsfun.com.tw/%E5%AF%86%E7%A2%BC/wiki-8783265-8437835)，就是把要加密的明文分成N個一組，然後把每組的第i個字連起來，形成一段無規律的話。\n\n一般比較常見的是2欄的棚欄密碼。\n比如明文：THERE IS A CIPHER\n去掉空格後變為：THEREISACIPHER\n兩個一組，得到：TH ER EI SA CI PH ER\n先取出第一個字母：TEESCPE\n再取出第二個字母：HRIAIHR\n連在一起就是：TEESCPEHRIAIHR\n這樣就得到我們需要的密碼了！\n\n而解密的時候，我們先吧[密文](https://www.itsfun.com.tw/%E5%AF%86%E6%96%87/wiki-4343875-4728655)從中間分開，變為兩行：\nT E E S C P E\nH R I A I H R\n再按上下上下的順序組合起來：\nTHEREISACIPHER\n分出[空格](https://www.itsfun.com.tw/%E7%A9%BA%E6%A0%BC/wiki-1130465-5262045)，就可以得到原文了：\nTHERE IS A CIPHER\n\n## Python 簡單實現\n十幾行代碼，非常簡單。\n後面的 for 循環部分應該還能再簡化一點。\n```python\nimport math\ninp = 'cvpgygppjvtgpgfgjgtq'\nnum = -2\nstep1 = [chr(97 + (ord(x)-97+num)%26) for x in inp]\nprint (step1)\n\nnum2 = 3\nnum3 = math.ceil(len(step1)/num2)\ns2 = [step1[i*num3: (num3*(i+1)) if (num3*(i+1))<len(step1) else len(step1)] for i in range(num2)]\nprint(s2)\ns3 = []\nfor j in range(num3):\n    for i in range(num2):\n        try:\n            s3.append(s2[i][j])\n        except:\n            pass\nprint (s3)\n'''\nand then there were none\n'''\n```","slug":"Valentine-pw","published":1,"updated":"2020-08-18T15:20:13.643Z","_id":"cke03cgoy0005r4k21j1m43tc","layout":"post","photos":[],"link":"","content":"<h2 id=\"七夕快樂哦\"><a href=\"#七夕快樂哦\" class=\"headerlink\" title=\"七夕快樂哦\"></a>七夕快樂哦</h2><p>今天是七夕呢，寫這個的起因是一個同學的女朋友發了個密碼解密給他。<br><img src=\"https://raw.githubusercontent.com/IsumiAlice/IsumiPic/master/20200410231059.jpg\" alt><br>這就是今天要解決的問題嘍，當然，先把兩種密碼的相關知識貼上。</p>\n<h2 id=\"凱撒密碼\"><a href=\"#凱撒密碼\" class=\"headerlink\" title=\"凱撒密碼\"></a>凱撒密碼</h2><p>在<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%AD%A6\" title=\"密碼學\" target=\"_blank\" rel=\"noopener\">密碼學</a>中，<strong>愷撒密碼</strong>（英語：Caesar cipher），或稱<strong>愷撒加密</strong>、<strong>愷撒變換</strong>、<strong>變換加密</strong>，是一種最簡單且最廣為人知的加密技術。它是一種<a href=\"https://zh.wikipedia.org/wiki/%E6%9B%BF%E6%8D%A2%E5%BC%8F%E5%AF%86%E7%A0%81\" title=\"替換式密碼\" target=\"_blank\" rel=\"noopener\">替換加密</a>的技術，<a href=\"https://zh.wikipedia.org/wiki/%E6%98%8E%E6%96%87\" title=\"明文\" target=\"_blank\" rel=\"noopener\">明文</a>中的所有字母都在<a href=\"https://zh.wikipedia.org/wiki/%E5%AD%97%E6%AF%8D%E8%A1%A8\" title=\"字母表\" target=\"_blank\" rel=\"noopener\">字母表</a>上向後（或向前）按照一個固定數目進行偏移後被替換成<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%86%E6%96%87\" title=\"密文\" target=\"_blank\" rel=\"noopener\">密文</a>。例如，當偏移量是3的時候，所有的字母A將被替換成D，B變成E，以此類推。這個加密方法是以<a href=\"https://zh.wikipedia.org/wiki/%E7%BE%85%E9%A6%AC%E5%85%B1%E5%92%8C\" title=\"羅馬共和\" target=\"_blank\" rel=\"noopener\">羅馬共和</a>時期<a href=\"https://zh.wikipedia.org/wiki/%E6%81%BA%E6%92%92\" title=\"愷撒\" target=\"_blank\" rel=\"noopener\">愷撒</a>的名字命名的，當年愷撒曾用此方法與其將軍們進行聯繫。</p>\n<p>愷撒密碼通常被作為其他更複雜的加密方法中的一個步驟，例如<a href=\"https://zh.wikipedia.org/wiki/%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81\" title=\"維吉尼亞密碼\" target=\"_blank\" rel=\"noopener\">維吉尼亞密碼</a>。愷撒密碼還在現代的<a href=\"https://zh.wikipedia.org/wiki/ROT13\" title=\"ROT13\" target=\"_blank\" rel=\"noopener\">ROT13</a>系統中被應用。但是和所有的利用字母表進行替換的加密技術一樣，愷撒密碼非常容易被破解，而且在實際應用中也無法保證通信安全。</p>\n<h2 id=\"柵欄密碼\"><a href=\"#柵欄密碼\" class=\"headerlink\" title=\"柵欄密碼\"></a>柵欄密碼</h2><p>所謂柵欄<a href=\"https://www.itsfun.com.tw/%E5%AF%86%E7%A2%BC/wiki-8783265-8437835\" target=\"_blank\" rel=\"noopener\">密碼</a>，就是把要加密的明文分成N個一組，然後把每組的第i個字連起來，形成一段無規律的話。</p>\n<p>一般比較常見的是2欄的棚欄密碼。<br>比如明文：THERE IS A CIPHER<br>去掉空格後變為：THEREISACIPHER<br>兩個一組，得到：TH ER EI SA CI PH ER<br>先取出第一個字母：TEESCPE<br>再取出第二個字母：HRIAIHR<br>連在一起就是：TEESCPEHRIAIHR<br>這樣就得到我們需要的密碼了！</p>\n<p>而解密的時候，我們先吧<a href=\"https://www.itsfun.com.tw/%E5%AF%86%E6%96%87/wiki-4343875-4728655\" target=\"_blank\" rel=\"noopener\">密文</a>從中間分開，變為兩行：<br>T E E S C P E<br>H R I A I H R<br>再按上下上下的順序組合起來：<br>THEREISACIPHER<br>分出<a href=\"https://www.itsfun.com.tw/%E7%A9%BA%E6%A0%BC/wiki-1130465-5262045\" target=\"_blank\" rel=\"noopener\">空格</a>，就可以得到原文了：<br>THERE IS A CIPHER</p>\n<h2 id=\"Python-簡單實現\"><a href=\"#Python-簡單實現\" class=\"headerlink\" title=\"Python 簡單實現\"></a>Python 簡單實現</h2><p>十幾行代碼，非常簡單。<br>後面的 for 循環部分應該還能再簡化一點。</p>\n<pre><code class=\"python\">import math\ninp = &#39;cvpgygppjvtgpgfgjgtq&#39;\nnum = -2\nstep1 = [chr(97 + (ord(x)-97+num)%26) for x in inp]\nprint (step1)\n\nnum2 = 3\nnum3 = math.ceil(len(step1)/num2)\ns2 = [step1[i*num3: (num3*(i+1)) if (num3*(i+1))&lt;len(step1) else len(step1)] for i in range(num2)]\nprint(s2)\ns3 = []\nfor j in range(num3):\n    for i in range(num2):\n        try:\n            s3.append(s2[i][j])\n        except:\n            pass\nprint (s3)\n&#39;&#39;&#39;\nand then there were none\n&#39;&#39;&#39;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"七夕快樂哦\"><a href=\"#七夕快樂哦\" class=\"headerlink\" title=\"七夕快樂哦\"></a>七夕快樂哦</h2><p>今天是七夕呢，寫這個的起因是一個同學的女朋友發了個密碼解密給他。<br><img src=\"https://raw.githubusercontent.com/IsumiAlice/IsumiPic/master/20200410231059.jpg\" alt><br>這就是今天要解決的問題嘍，當然，先把兩種密碼的相關知識貼上。</p>\n<h2 id=\"凱撒密碼\"><a href=\"#凱撒密碼\" class=\"headerlink\" title=\"凱撒密碼\"></a>凱撒密碼</h2><p>在<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%AD%A6\" title=\"密碼學\" target=\"_blank\" rel=\"noopener\">密碼學</a>中，<strong>愷撒密碼</strong>（英語：Caesar cipher），或稱<strong>愷撒加密</strong>、<strong>愷撒變換</strong>、<strong>變換加密</strong>，是一種最簡單且最廣為人知的加密技術。它是一種<a href=\"https://zh.wikipedia.org/wiki/%E6%9B%BF%E6%8D%A2%E5%BC%8F%E5%AF%86%E7%A0%81\" title=\"替換式密碼\" target=\"_blank\" rel=\"noopener\">替換加密</a>的技術，<a href=\"https://zh.wikipedia.org/wiki/%E6%98%8E%E6%96%87\" title=\"明文\" target=\"_blank\" rel=\"noopener\">明文</a>中的所有字母都在<a href=\"https://zh.wikipedia.org/wiki/%E5%AD%97%E6%AF%8D%E8%A1%A8\" title=\"字母表\" target=\"_blank\" rel=\"noopener\">字母表</a>上向後（或向前）按照一個固定數目進行偏移後被替換成<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%86%E6%96%87\" title=\"密文\" target=\"_blank\" rel=\"noopener\">密文</a>。例如，當偏移量是3的時候，所有的字母A將被替換成D，B變成E，以此類推。這個加密方法是以<a href=\"https://zh.wikipedia.org/wiki/%E7%BE%85%E9%A6%AC%E5%85%B1%E5%92%8C\" title=\"羅馬共和\" target=\"_blank\" rel=\"noopener\">羅馬共和</a>時期<a href=\"https://zh.wikipedia.org/wiki/%E6%81%BA%E6%92%92\" title=\"愷撒\" target=\"_blank\" rel=\"noopener\">愷撒</a>的名字命名的，當年愷撒曾用此方法與其將軍們進行聯繫。</p>\n<p>愷撒密碼通常被作為其他更複雜的加密方法中的一個步驟，例如<a href=\"https://zh.wikipedia.org/wiki/%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81\" title=\"維吉尼亞密碼\" target=\"_blank\" rel=\"noopener\">維吉尼亞密碼</a>。愷撒密碼還在現代的<a href=\"https://zh.wikipedia.org/wiki/ROT13\" title=\"ROT13\" target=\"_blank\" rel=\"noopener\">ROT13</a>系統中被應用。但是和所有的利用字母表進行替換的加密技術一樣，愷撒密碼非常容易被破解，而且在實際應用中也無法保證通信安全。</p>\n<h2 id=\"柵欄密碼\"><a href=\"#柵欄密碼\" class=\"headerlink\" title=\"柵欄密碼\"></a>柵欄密碼</h2><p>所謂柵欄<a href=\"https://www.itsfun.com.tw/%E5%AF%86%E7%A2%BC/wiki-8783265-8437835\" target=\"_blank\" rel=\"noopener\">密碼</a>，就是把要加密的明文分成N個一組，然後把每組的第i個字連起來，形成一段無規律的話。</p>\n<p>一般比較常見的是2欄的棚欄密碼。<br>比如明文：THERE IS A CIPHER<br>去掉空格後變為：THEREISACIPHER<br>兩個一組，得到：TH ER EI SA CI PH ER<br>先取出第一個字母：TEESCPE<br>再取出第二個字母：HRIAIHR<br>連在一起就是：TEESCPEHRIAIHR<br>這樣就得到我們需要的密碼了！</p>\n<p>而解密的時候，我們先吧<a href=\"https://www.itsfun.com.tw/%E5%AF%86%E6%96%87/wiki-4343875-4728655\" target=\"_blank\" rel=\"noopener\">密文</a>從中間分開，變為兩行：<br>T E E S C P E<br>H R I A I H R<br>再按上下上下的順序組合起來：<br>THEREISACIPHER<br>分出<a href=\"https://www.itsfun.com.tw/%E7%A9%BA%E6%A0%BC/wiki-1130465-5262045\" target=\"_blank\" rel=\"noopener\">空格</a>，就可以得到原文了：<br>THERE IS A CIPHER</p>\n<h2 id=\"Python-簡單實現\"><a href=\"#Python-簡單實現\" class=\"headerlink\" title=\"Python 簡單實現\"></a>Python 簡單實現</h2><p>十幾行代碼，非常簡單。<br>後面的 for 循環部分應該還能再簡化一點。</p>\n<pre><code class=\"python\">import math\ninp = &#39;cvpgygppjvtgpgfgjgtq&#39;\nnum = -2\nstep1 = [chr(97 + (ord(x)-97+num)%26) for x in inp]\nprint (step1)\n\nnum2 = 3\nnum3 = math.ceil(len(step1)/num2)\ns2 = [step1[i*num3: (num3*(i+1)) if (num3*(i+1))&lt;len(step1) else len(step1)] for i in range(num2)]\nprint(s2)\ns3 = []\nfor j in range(num3):\n    for i in range(num2):\n        try:\n            s3.append(s2[i][j])\n        except:\n            pass\nprint (s3)\n&#39;&#39;&#39;\nand then there were none\n&#39;&#39;&#39;\n</code></pre>\n"},{"title":"基於 Hexo 搭建個人靜態部落格","author":"死体菌","date":"2018-01-29T03:00:18.000Z","cover":"https://gitee.com/IsumiAlice/IsumiPic/raw/master///20200515204625.jpg","_content":"\n\n\n## 安裝\n安裝[Node.js](https://nodejs.org/en/)  \n更換爲國內源，安裝 cnpm\n\n```\n$ npm config set registry https://registry.npm.taobao.org\n$ npm config get registry\n\n$ npm install -g cnpm\n$ cmpm install hexo \n```\n安裝[Git](https://git-scm.com/downloads)  \n安裝[Hexo](https://hexo.io/zh-tw/)  \n``` bash\n$ npm install -g hexo-cli\n```\n## 建立\n一旦 Hexo 完成後，請執行下列指令，Hexo 會在指定資料夾中建立所有您需要的檔案。\n``` bash\n$ hexo init blog\n$ cd blog\n$ npm install\n```\n### 建立一篇新的文章\n``` bash\n$ hexo new [layout] <title>\n```\n| 佈局  | 路徑           |\n| ----- | -------------- |\n| post  | source/_posts  |\n| page  | source         |\n| draft | source/_drafts |\n### 產生靜態檔案\n``` bash\n$ hexo generate\n```\n| 選項         | 描述               |\n| ------------ | ------------------ |\n| -d, --deploy | 產生完成即部署網站 |\n| -w, --watch  | 監看檔案變更       |\n\n### 啟動伺服器\n預設為 http://localhost:4000/\n``` bash\n$ hexo server\n```\n### 部署網站到Git\n可以直接使用git命令部署，將 ``public`` 資料夾裏的文件複製到git目錄下，之後使用 ``git commit``\n``` bash\n$ hexo generate\n\n$ git add .\n$ git commit -m \"update\"\n$ git push origin master\n```\n### Clean\n``` bash\n$ hexo clean\n```\n### 列出網站資料\n``` bash\n$ hexo list <type>\n```\n### 顯示版本咨詢\n``` bash\n$ hexo version\n```\n## 更換主題\n在 ``themes`` 資料夾內，新增一個資料夾，並修改 ``_config.yml`` 內的 ``theme`` 設定，即可切換主題\n\n## 渲染公式\n\n更換 markdown 渲染引擎\n\n```\nnpm uninstall hexo-renderer-marked --save\nnpm install hexo-renderer-kramed --save\n```\n\n修改 node_modules/kramed/lib/rules/inline.js\n\n注意註釋部分\n\n```\nvar inline = {\n  // escape: /^\\\\([\\\\`*{}\\[\\]()#$+\\-.!_>])/,\n  escape: /^\\\\([`*\\[\\]()#$+\\-.!_>])/,\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,\n  url: noop,\n  html: /^<!--[\\s\\S]*?-->|^<(\\w+(?!:\\/|[^\\w\\s@]*@)\\b)*?(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>([\\s\\S]*?)?<\\/\\1>|^<(\\w+(?!:\\/|[^\\w\\s@]*@)\\b)(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n  reffn: /^!?\\[\\^(inside)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  // em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`$]| {2,}\\n|$)/,\n  math: /^\\$\\$\\s*([\\s\\S]*?[^\\$])\\s*\\$\\$(?!\\$)/,\n};\n```\n\n在主題中開啓 mathjax\n\n在 themes/xxx/_config.yml\n\n一般\n\n```\nmath:\n  enable: true\n  per_page: true\n  engine: mathjax\n```\n\n在需要渲染公式的文章的 Fornt-matter 中打開 mathjax\n\n```\n---\nmathjax: true\n--\n```","source":"_posts/hello-hexo.md","raw":"---\ntitle: 基於 Hexo 搭建個人靜態部落格\nauthor: 死体菌\ncategories: \n - 技術\ndate: 2018-01-29 11:00:18\ntags: \n - web\ncover: https://gitee.com/IsumiAlice/IsumiPic/raw/master///20200515204625.jpg\n---\n\n\n\n## 安裝\n安裝[Node.js](https://nodejs.org/en/)  \n更換爲國內源，安裝 cnpm\n\n```\n$ npm config set registry https://registry.npm.taobao.org\n$ npm config get registry\n\n$ npm install -g cnpm\n$ cmpm install hexo \n```\n安裝[Git](https://git-scm.com/downloads)  \n安裝[Hexo](https://hexo.io/zh-tw/)  \n``` bash\n$ npm install -g hexo-cli\n```\n## 建立\n一旦 Hexo 完成後，請執行下列指令，Hexo 會在指定資料夾中建立所有您需要的檔案。\n``` bash\n$ hexo init blog\n$ cd blog\n$ npm install\n```\n### 建立一篇新的文章\n``` bash\n$ hexo new [layout] <title>\n```\n| 佈局  | 路徑           |\n| ----- | -------------- |\n| post  | source/_posts  |\n| page  | source         |\n| draft | source/_drafts |\n### 產生靜態檔案\n``` bash\n$ hexo generate\n```\n| 選項         | 描述               |\n| ------------ | ------------------ |\n| -d, --deploy | 產生完成即部署網站 |\n| -w, --watch  | 監看檔案變更       |\n\n### 啟動伺服器\n預設為 http://localhost:4000/\n``` bash\n$ hexo server\n```\n### 部署網站到Git\n可以直接使用git命令部署，將 ``public`` 資料夾裏的文件複製到git目錄下，之後使用 ``git commit``\n``` bash\n$ hexo generate\n\n$ git add .\n$ git commit -m \"update\"\n$ git push origin master\n```\n### Clean\n``` bash\n$ hexo clean\n```\n### 列出網站資料\n``` bash\n$ hexo list <type>\n```\n### 顯示版本咨詢\n``` bash\n$ hexo version\n```\n## 更換主題\n在 ``themes`` 資料夾內，新增一個資料夾，並修改 ``_config.yml`` 內的 ``theme`` 設定，即可切換主題\n\n## 渲染公式\n\n更換 markdown 渲染引擎\n\n```\nnpm uninstall hexo-renderer-marked --save\nnpm install hexo-renderer-kramed --save\n```\n\n修改 node_modules/kramed/lib/rules/inline.js\n\n注意註釋部分\n\n```\nvar inline = {\n  // escape: /^\\\\([\\\\`*{}\\[\\]()#$+\\-.!_>])/,\n  escape: /^\\\\([`*\\[\\]()#$+\\-.!_>])/,\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,\n  url: noop,\n  html: /^<!--[\\s\\S]*?-->|^<(\\w+(?!:\\/|[^\\w\\s@]*@)\\b)*?(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>([\\s\\S]*?)?<\\/\\1>|^<(\\w+(?!:\\/|[^\\w\\s@]*@)\\b)(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n  reffn: /^!?\\[\\^(inside)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  // em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`$]| {2,}\\n|$)/,\n  math: /^\\$\\$\\s*([\\s\\S]*?[^\\$])\\s*\\$\\$(?!\\$)/,\n};\n```\n\n在主題中開啓 mathjax\n\n在 themes/xxx/_config.yml\n\n一般\n\n```\nmath:\n  enable: true\n  per_page: true\n  engine: mathjax\n```\n\n在需要渲染公式的文章的 Fornt-matter 中打開 mathjax\n\n```\n---\nmathjax: true\n--\n```","slug":"hello-hexo","published":1,"updated":"2020-08-18T15:18:45.828Z","_id":"cke03cgoz0006r4k24lfvq2l9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h2><p>安裝<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a><br>更換爲國內源，安裝 cnpm</p>\n<pre><code>$ npm config set registry https://registry.npm.taobao.org\n$ npm config get registry\n\n$ npm install -g cnpm\n$ cmpm install hexo \n</code></pre><p>安裝<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">Git</a><br>安裝<a href=\"https://hexo.io/zh-tw/\" target=\"_blank\" rel=\"noopener\">Hexo</a>  </p>\n<pre><code class=\"bash\">$ npm install -g hexo-cli\n</code></pre>\n<h2 id=\"建立\"><a href=\"#建立\" class=\"headerlink\" title=\"建立\"></a>建立</h2><p>一旦 Hexo 完成後，請執行下列指令，Hexo 會在指定資料夾中建立所有您需要的檔案。</p>\n<pre><code class=\"bash\">$ hexo init blog\n$ cd blog\n$ npm install\n</code></pre>\n<h3 id=\"建立一篇新的文章\"><a href=\"#建立一篇新的文章\" class=\"headerlink\" title=\"建立一篇新的文章\"></a>建立一篇新的文章</h3><pre><code class=\"bash\">$ hexo new [layout] &lt;title&gt;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>佈局</th>\n<th>路徑</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>post</td>\n<td>source/_posts</td>\n</tr>\n<tr>\n<td>page</td>\n<td>source</td>\n</tr>\n<tr>\n<td>draft</td>\n<td>source/_drafts</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"產生靜態檔案\"><a href=\"#產生靜態檔案\" class=\"headerlink\" title=\"產生靜態檔案\"></a>產生靜態檔案</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>選項</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d, –deploy</td>\n<td>產生完成即部署網站</td>\n</tr>\n<tr>\n<td>-w, –watch</td>\n<td>監看檔案變更</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"啟動伺服器\"><a href=\"#啟動伺服器\" class=\"headerlink\" title=\"啟動伺服器\"></a>啟動伺服器</h3><p>預設為 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a></p>\n<pre><code class=\"bash\">$ hexo server\n</code></pre>\n<h3 id=\"部署網站到Git\"><a href=\"#部署網站到Git\" class=\"headerlink\" title=\"部署網站到Git\"></a>部署網站到Git</h3><p>可以直接使用git命令部署，將 <code>public</code> 資料夾裏的文件複製到git目錄下，之後使用 <code>git commit</code></p>\n<pre><code class=\"bash\">$ hexo generate\n\n$ git add .\n$ git commit -m &quot;update&quot;\n$ git push origin master\n</code></pre>\n<h3 id=\"Clean\"><a href=\"#Clean\" class=\"headerlink\" title=\"Clean\"></a>Clean</h3><pre><code class=\"bash\">$ hexo clean\n</code></pre>\n<h3 id=\"列出網站資料\"><a href=\"#列出網站資料\" class=\"headerlink\" title=\"列出網站資料\"></a>列出網站資料</h3><pre><code class=\"bash\">$ hexo list &lt;type&gt;\n</code></pre>\n<h3 id=\"顯示版本咨詢\"><a href=\"#顯示版本咨詢\" class=\"headerlink\" title=\"顯示版本咨詢\"></a>顯示版本咨詢</h3><pre><code class=\"bash\">$ hexo version\n</code></pre>\n<h2 id=\"更換主題\"><a href=\"#更換主題\" class=\"headerlink\" title=\"更換主題\"></a>更換主題</h2><p>在 <code>themes</code> 資料夾內，新增一個資料夾，並修改 <code>_config.yml</code> 內的 <code>theme</code> 設定，即可切換主題</p>\n<h2 id=\"渲染公式\"><a href=\"#渲染公式\" class=\"headerlink\" title=\"渲染公式\"></a>渲染公式</h2><p>更換 markdown 渲染引擎</p>\n<pre><code>npm uninstall hexo-renderer-marked --save\nnpm install hexo-renderer-kramed --save\n</code></pre><p>修改 node_modules/kramed/lib/rules/inline.js</p>\n<p>注意註釋部分</p>\n<pre><code>var inline = {\n  // escape: /^\\\\([\\\\`*{}\\[\\]()#$+\\-.!_&gt;])/,\n  escape: /^\\\\([`*\\[\\]()#$+\\-.!_&gt;])/,\n  autolink: /^&lt;([^ &gt;]+(@|:\\/)[^ &gt;]+)&gt;/,\n  url: noop,\n  html: /^&lt;!--[\\s\\S]*?--&gt;|^&lt;(\\w+(?!:\\/|[^\\w\\s@]*@)\\b)*?(?:&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;|[^&#39;&quot;&gt;])*?&gt;([\\s\\S]*?)?&lt;\\/\\1&gt;|^&lt;(\\w+(?!:\\/|[^\\w\\s@]*@)\\b)(?:&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;|[^&#39;&quot;&gt;])*?&gt;/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n  reffn: /^!?\\[\\^(inside)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  // em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\&lt;!\\[_*`$]| {2,}\\n|$)/,\n  math: /^\\$\\$\\s*([\\s\\S]*?[^\\$])\\s*\\$\\$(?!\\$)/,\n};\n</code></pre><p>在主題中開啓 mathjax</p>\n<p>在 themes/xxx/_config.yml</p>\n<p>一般</p>\n<pre><code>math:\n  enable: true\n  per_page: true\n  engine: mathjax\n</code></pre><p>在需要渲染公式的文章的 Fornt-matter 中打開 mathjax</p>\n<pre><code>---\nmathjax: true\n--\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h2><p>安裝<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a><br>更換爲國內源，安裝 cnpm</p>\n<pre><code>$ npm config set registry https://registry.npm.taobao.org\n$ npm config get registry\n\n$ npm install -g cnpm\n$ cmpm install hexo \n</code></pre><p>安裝<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">Git</a><br>安裝<a href=\"https://hexo.io/zh-tw/\" target=\"_blank\" rel=\"noopener\">Hexo</a>  </p>\n<pre><code class=\"bash\">$ npm install -g hexo-cli\n</code></pre>\n<h2 id=\"建立\"><a href=\"#建立\" class=\"headerlink\" title=\"建立\"></a>建立</h2><p>一旦 Hexo 完成後，請執行下列指令，Hexo 會在指定資料夾中建立所有您需要的檔案。</p>\n<pre><code class=\"bash\">$ hexo init blog\n$ cd blog\n$ npm install\n</code></pre>\n<h3 id=\"建立一篇新的文章\"><a href=\"#建立一篇新的文章\" class=\"headerlink\" title=\"建立一篇新的文章\"></a>建立一篇新的文章</h3><pre><code class=\"bash\">$ hexo new [layout] &lt;title&gt;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>佈局</th>\n<th>路徑</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>post</td>\n<td>source/_posts</td>\n</tr>\n<tr>\n<td>page</td>\n<td>source</td>\n</tr>\n<tr>\n<td>draft</td>\n<td>source/_drafts</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"產生靜態檔案\"><a href=\"#產生靜態檔案\" class=\"headerlink\" title=\"產生靜態檔案\"></a>產生靜態檔案</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>選項</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d, –deploy</td>\n<td>產生完成即部署網站</td>\n</tr>\n<tr>\n<td>-w, –watch</td>\n<td>監看檔案變更</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"啟動伺服器\"><a href=\"#啟動伺服器\" class=\"headerlink\" title=\"啟動伺服器\"></a>啟動伺服器</h3><p>預設為 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a></p>\n<pre><code class=\"bash\">$ hexo server\n</code></pre>\n<h3 id=\"部署網站到Git\"><a href=\"#部署網站到Git\" class=\"headerlink\" title=\"部署網站到Git\"></a>部署網站到Git</h3><p>可以直接使用git命令部署，將 <code>public</code> 資料夾裏的文件複製到git目錄下，之後使用 <code>git commit</code></p>\n<pre><code class=\"bash\">$ hexo generate\n\n$ git add .\n$ git commit -m &quot;update&quot;\n$ git push origin master\n</code></pre>\n<h3 id=\"Clean\"><a href=\"#Clean\" class=\"headerlink\" title=\"Clean\"></a>Clean</h3><pre><code class=\"bash\">$ hexo clean\n</code></pre>\n<h3 id=\"列出網站資料\"><a href=\"#列出網站資料\" class=\"headerlink\" title=\"列出網站資料\"></a>列出網站資料</h3><pre><code class=\"bash\">$ hexo list &lt;type&gt;\n</code></pre>\n<h3 id=\"顯示版本咨詢\"><a href=\"#顯示版本咨詢\" class=\"headerlink\" title=\"顯示版本咨詢\"></a>顯示版本咨詢</h3><pre><code class=\"bash\">$ hexo version\n</code></pre>\n<h2 id=\"更換主題\"><a href=\"#更換主題\" class=\"headerlink\" title=\"更換主題\"></a>更換主題</h2><p>在 <code>themes</code> 資料夾內，新增一個資料夾，並修改 <code>_config.yml</code> 內的 <code>theme</code> 設定，即可切換主題</p>\n<h2 id=\"渲染公式\"><a href=\"#渲染公式\" class=\"headerlink\" title=\"渲染公式\"></a>渲染公式</h2><p>更換 markdown 渲染引擎</p>\n<pre><code>npm uninstall hexo-renderer-marked --save\nnpm install hexo-renderer-kramed --save\n</code></pre><p>修改 node_modules/kramed/lib/rules/inline.js</p>\n<p>注意註釋部分</p>\n<pre><code>var inline = {\n  // escape: /^\\\\([\\\\`*{}\\[\\]()#$+\\-.!_&gt;])/,\n  escape: /^\\\\([`*\\[\\]()#$+\\-.!_&gt;])/,\n  autolink: /^&lt;([^ &gt;]+(@|:\\/)[^ &gt;]+)&gt;/,\n  url: noop,\n  html: /^&lt;!--[\\s\\S]*?--&gt;|^&lt;(\\w+(?!:\\/|[^\\w\\s@]*@)\\b)*?(?:&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;|[^&#39;&quot;&gt;])*?&gt;([\\s\\S]*?)?&lt;\\/\\1&gt;|^&lt;(\\w+(?!:\\/|[^\\w\\s@]*@)\\b)(?:&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;|[^&#39;&quot;&gt;])*?&gt;/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n  reffn: /^!?\\[\\^(inside)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  // em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\&lt;!\\[_*`$]| {2,}\\n|$)/,\n  math: /^\\$\\$\\s*([\\s\\S]*?[^\\$])\\s*\\$\\$(?!\\$)/,\n};\n</code></pre><p>在主題中開啓 mathjax</p>\n<p>在 themes/xxx/_config.yml</p>\n<p>一般</p>\n<pre><code>math:\n  enable: true\n  per_page: true\n  engine: mathjax\n</code></pre><p>在需要渲染公式的文章的 Fornt-matter 中打開 mathjax</p>\n<pre><code>---\nmathjax: true\n--\n</code></pre>"},{"title":"Raspberry 基礎配置","author":"死体菌","avatar":"https://gitee.com/IsumiAlice/IsumiPic/raw/master/2005/20200616222058.jpg","date":"2020-02-29T14:26:47.000Z","comments":1,"keywords":"Raspberry","description":"Raspberry 基礎配置","cover":"https://gitee.com/IsumiAlice/IsumiPic/raw/master///20200515204625.jpg","_content":"\n\n\n# 寫入系統到存儲卡中\n\n在通電前, 要先把系統搞定\n\n官方下載站: http://www.raspberrypi.org/downloads\n\n格式化工具: SDFormatter\n\n寫入工具: Win32DiskImager\n\n注意寫入過程中不要點格式化\n\n默認登入名為 pi, pw: raspberry\n\nroot pw: raspberry\n\n# 硬體裝配\n\n把主板從盒子取出來\n\n插入裝有系統的存儲卡\n\n連接電源, HDMI, 網綫, 鍵鼠\n\n插入電源後即直接進入系統\n\n# 系統配備\n\n以下配備均是在官方系統下操作的\n## root\n\n由pi用戶登録後\n\n```\nsudo passwd root\n\nsudo passwd --unlock root\n```\n\n## 更換為國內 source\n```\nsudo nano /etc/apt/sources.list \n添加\ndeb http://mirrors.aliyun.com/raspbian/raspbian/ buster main contrib non-free rpi\ndeb-src http://mirrors.aliyun.com/raspbian/raspbian/ buster main contrib non-free rpi\n更新\nsudo apt-get update\n```\n## 配置中文\n\n安裝中文字庫\n\n```\nsudo apt-get install ttf-wqy-zenhei\n```\n\n輸入法\n```\nsudo apt-get install fcitx fcitx-googlepinyin fcitx-module-cloudpinyin fcitx-sunpinyin\n```\n\n配置中文\n\n``sudo raspi-config`` - ``4 Localisation`` - ``I1 Change Locale``\n\n選擇 zh_CN GB2312, zh_CN.GB18030 GB18030, zh_CN.GBK GBK, zh_CN.UTF-8  UTF-8, zh_CN.UTF-8\n\n``Enter`` - ``sudo reboot``\n\n重啓後打開設置, Localisation - SetLocal - CharacterSet - GB18030 - OK\n\n之後會提示重啓 - Yes\n\n配置中文輸入法\n\nFcitx配置 - 左下角加好 - 選擇需要的\n\n## 固定 IP\n```\nsudo nano /etc/dhcpcd.conf\n```\n然後自己看着辦\n## 開啓 SSH\n\n``sudo raspi-config`` - ``Interfacing Options`` - ``SSH``\n\n## 系統備份, 還原\n\n在 Windows 下可以創建一個空的``.img``資料, 然後插入存儲卡, 使用 ``Win32 Disk Imager`` 的 ``Read`` 功能. 會將整張卡進行備份.\n\n## 配置代理服務\n\n### 安裝 SS\n\n```\nsudo apt-get install shadowsocks\nor\nsudo pip install shadowsocks\n```\n\n配置 SS 參數\n\n```\nsudo vi /etc/shadowsocks/config.json\n{\n    \"server\": ,\n    \"server_port\": ,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\": \"1080\",\n    \"password\": ,\n    \"timeout\": 300,\n    \"method\": \"aes-256-cfb\",\n    \"fast_open\": false,\n    \"workers\": 1\n}\n```\n\n啓動\n\n```\napt-get\nsudo /usr/bin/sslocal -c /etc/shadowsocks/config.json -d start\n\npip\nsudo /usr/local/bin/sslocal -c /etc/shadowsocks/config.json -d start\n```\n\n開機啓動\n\n```\nsu\nvim /etc/rc.local\n最後的 exit 0 的上一行添加\nsudo /usr/bin/sslocal -c /etc/shadowsocks/config.json -d start\n```\n\n不同方式安裝的 sslocal 位置可能不同, ``which sslocal``\n\n### 配置瀏覽器代理\n\n下載 SwitchyOmega https://github.com/FelisCatus/SwitchyOmega/releases \n\n打開瀏覽器拓展頁面 chrome://extensions 并拖入\n\n若出現錯誤, 打開瀏覽器頁面右上角開發者模式, 然後解壓縮 release 的包, 瀏覽器中選擇加載已解壓的拓展\n\n**配置 SwitchyOmega 的方法**\n\n左側 proxy, 修改為 SOCKS5, 127.0.0.1, 1080\n\nauto switch, 添加規則  https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt \n\n![](http://www.phpvar.com/phpvar.com/wp-content/uploads/auto-switch-768x387.png)\n\n### 配置終端代理\n\n使用 proxychains 執行相應命令\n\n```\nsudo apt install proxychains4\nsudo vi /etc/proxychains.conf\n最後一行添加\nsocks5 127.0.0.1 1080\n并刪除多餘內容\nproxychains curl www.google.com\n```\n\n\n\n# 一些基本操作\n\n##  Neofetch 顯示系統信息\n\n```\nsudo apt-get install neofetch\nneofetch\n```\n\n可以修改  `~/.config/neofetch/config.conf` 自定義輸出信息\n\n## 獲取溫度\n\n```\ncd /sys/class/thermal/thermal_zone0\ncat temp\n```\n返回值除以 1000 即為當前 CPU 溫度\n\n## 設置時區\n\n``date`` 查詢系統時間\n\n```\nsudo dpkg-reconfigure tzdata\n\nAsia\n```\n\n樹莓派由於沒有電池, 斷電後無法保存時間, 默認通過 NTP 服務獲取時間, 如果時間不準確, 可以 ``sudo ntpd -s –d`` 來校準\n\n也可以 ``sudo date  --s=\"2018-10-19 14:54:00\"`` 來設置時間","source":"_posts/Raspberry-hello.md","raw":"---\ntitle: Raspberry 基礎配置\nauthor: 死体菌\navatar: https://gitee.com/IsumiAlice/IsumiPic/raw/master/2005/20200616222058.jpg\ncategories: 技術\ndate: 2020-02-29 22:26:47\ncomments: true\ntags: \n - 樹莓派\n - 計算機\nkeywords: Raspberry\ndescription: Raspberry 基礎配置\ncover:  https://gitee.com/IsumiAlice/IsumiPic/raw/master///20200515204625.jpg\n---\n\n\n\n# 寫入系統到存儲卡中\n\n在通電前, 要先把系統搞定\n\n官方下載站: http://www.raspberrypi.org/downloads\n\n格式化工具: SDFormatter\n\n寫入工具: Win32DiskImager\n\n注意寫入過程中不要點格式化\n\n默認登入名為 pi, pw: raspberry\n\nroot pw: raspberry\n\n# 硬體裝配\n\n把主板從盒子取出來\n\n插入裝有系統的存儲卡\n\n連接電源, HDMI, 網綫, 鍵鼠\n\n插入電源後即直接進入系統\n\n# 系統配備\n\n以下配備均是在官方系統下操作的\n## root\n\n由pi用戶登録後\n\n```\nsudo passwd root\n\nsudo passwd --unlock root\n```\n\n## 更換為國內 source\n```\nsudo nano /etc/apt/sources.list \n添加\ndeb http://mirrors.aliyun.com/raspbian/raspbian/ buster main contrib non-free rpi\ndeb-src http://mirrors.aliyun.com/raspbian/raspbian/ buster main contrib non-free rpi\n更新\nsudo apt-get update\n```\n## 配置中文\n\n安裝中文字庫\n\n```\nsudo apt-get install ttf-wqy-zenhei\n```\n\n輸入法\n```\nsudo apt-get install fcitx fcitx-googlepinyin fcitx-module-cloudpinyin fcitx-sunpinyin\n```\n\n配置中文\n\n``sudo raspi-config`` - ``4 Localisation`` - ``I1 Change Locale``\n\n選擇 zh_CN GB2312, zh_CN.GB18030 GB18030, zh_CN.GBK GBK, zh_CN.UTF-8  UTF-8, zh_CN.UTF-8\n\n``Enter`` - ``sudo reboot``\n\n重啓後打開設置, Localisation - SetLocal - CharacterSet - GB18030 - OK\n\n之後會提示重啓 - Yes\n\n配置中文輸入法\n\nFcitx配置 - 左下角加好 - 選擇需要的\n\n## 固定 IP\n```\nsudo nano /etc/dhcpcd.conf\n```\n然後自己看着辦\n## 開啓 SSH\n\n``sudo raspi-config`` - ``Interfacing Options`` - ``SSH``\n\n## 系統備份, 還原\n\n在 Windows 下可以創建一個空的``.img``資料, 然後插入存儲卡, 使用 ``Win32 Disk Imager`` 的 ``Read`` 功能. 會將整張卡進行備份.\n\n## 配置代理服務\n\n### 安裝 SS\n\n```\nsudo apt-get install shadowsocks\nor\nsudo pip install shadowsocks\n```\n\n配置 SS 參數\n\n```\nsudo vi /etc/shadowsocks/config.json\n{\n    \"server\": ,\n    \"server_port\": ,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\": \"1080\",\n    \"password\": ,\n    \"timeout\": 300,\n    \"method\": \"aes-256-cfb\",\n    \"fast_open\": false,\n    \"workers\": 1\n}\n```\n\n啓動\n\n```\napt-get\nsudo /usr/bin/sslocal -c /etc/shadowsocks/config.json -d start\n\npip\nsudo /usr/local/bin/sslocal -c /etc/shadowsocks/config.json -d start\n```\n\n開機啓動\n\n```\nsu\nvim /etc/rc.local\n最後的 exit 0 的上一行添加\nsudo /usr/bin/sslocal -c /etc/shadowsocks/config.json -d start\n```\n\n不同方式安裝的 sslocal 位置可能不同, ``which sslocal``\n\n### 配置瀏覽器代理\n\n下載 SwitchyOmega https://github.com/FelisCatus/SwitchyOmega/releases \n\n打開瀏覽器拓展頁面 chrome://extensions 并拖入\n\n若出現錯誤, 打開瀏覽器頁面右上角開發者模式, 然後解壓縮 release 的包, 瀏覽器中選擇加載已解壓的拓展\n\n**配置 SwitchyOmega 的方法**\n\n左側 proxy, 修改為 SOCKS5, 127.0.0.1, 1080\n\nauto switch, 添加規則  https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt \n\n![](http://www.phpvar.com/phpvar.com/wp-content/uploads/auto-switch-768x387.png)\n\n### 配置終端代理\n\n使用 proxychains 執行相應命令\n\n```\nsudo apt install proxychains4\nsudo vi /etc/proxychains.conf\n最後一行添加\nsocks5 127.0.0.1 1080\n并刪除多餘內容\nproxychains curl www.google.com\n```\n\n\n\n# 一些基本操作\n\n##  Neofetch 顯示系統信息\n\n```\nsudo apt-get install neofetch\nneofetch\n```\n\n可以修改  `~/.config/neofetch/config.conf` 自定義輸出信息\n\n## 獲取溫度\n\n```\ncd /sys/class/thermal/thermal_zone0\ncat temp\n```\n返回值除以 1000 即為當前 CPU 溫度\n\n## 設置時區\n\n``date`` 查詢系統時間\n\n```\nsudo dpkg-reconfigure tzdata\n\nAsia\n```\n\n樹莓派由於沒有電池, 斷電後無法保存時間, 默認通過 NTP 服務獲取時間, 如果時間不準確, 可以 ``sudo ntpd -s –d`` 來校準\n\n也可以 ``sudo date  --s=\"2018-10-19 14:54:00\"`` 來設置時間","slug":"Raspberry-hello","published":1,"updated":"2020-08-18T15:20:01.145Z","_id":"cke03cgp20009r4k28v0lrvpn","layout":"post","photos":[],"link":"","content":"<h1 id=\"寫入系統到存儲卡中\"><a href=\"#寫入系統到存儲卡中\" class=\"headerlink\" title=\"寫入系統到存儲卡中\"></a>寫入系統到存儲卡中</h1><p>在通電前, 要先把系統搞定</p>\n<p>官方下載站: <a href=\"http://www.raspberrypi.org/downloads\" target=\"_blank\" rel=\"noopener\">http://www.raspberrypi.org/downloads</a></p>\n<p>格式化工具: SDFormatter</p>\n<p>寫入工具: Win32DiskImager</p>\n<p>注意寫入過程中不要點格式化</p>\n<p>默認登入名為 pi, pw: raspberry</p>\n<p>root pw: raspberry</p>\n<h1 id=\"硬體裝配\"><a href=\"#硬體裝配\" class=\"headerlink\" title=\"硬體裝配\"></a>硬體裝配</h1><p>把主板從盒子取出來</p>\n<p>插入裝有系統的存儲卡</p>\n<p>連接電源, HDMI, 網綫, 鍵鼠</p>\n<p>插入電源後即直接進入系統</p>\n<h1 id=\"系統配備\"><a href=\"#系統配備\" class=\"headerlink\" title=\"系統配備\"></a>系統配備</h1><p>以下配備均是在官方系統下操作的</p>\n<h2 id=\"root\"><a href=\"#root\" class=\"headerlink\" title=\"root\"></a>root</h2><p>由pi用戶登録後</p>\n<pre><code>sudo passwd root\n\nsudo passwd --unlock root\n</code></pre><h2 id=\"更換為國內-source\"><a href=\"#更換為國內-source\" class=\"headerlink\" title=\"更換為國內 source\"></a>更換為國內 source</h2><pre><code>sudo nano /etc/apt/sources.list \n添加\ndeb http://mirrors.aliyun.com/raspbian/raspbian/ buster main contrib non-free rpi\ndeb-src http://mirrors.aliyun.com/raspbian/raspbian/ buster main contrib non-free rpi\n更新\nsudo apt-get update\n</code></pre><h2 id=\"配置中文\"><a href=\"#配置中文\" class=\"headerlink\" title=\"配置中文\"></a>配置中文</h2><p>安裝中文字庫</p>\n<pre><code>sudo apt-get install ttf-wqy-zenhei\n</code></pre><p>輸入法</p>\n<pre><code>sudo apt-get install fcitx fcitx-googlepinyin fcitx-module-cloudpinyin fcitx-sunpinyin\n</code></pre><p>配置中文</p>\n<p><code>sudo raspi-config</code> - <code>4 Localisation</code> - <code>I1 Change Locale</code></p>\n<p>選擇 zh_CN GB2312, zh_CN.GB18030 GB18030, zh_CN.GBK GBK, zh_CN.UTF-8  UTF-8, zh_CN.UTF-8</p>\n<p><code>Enter</code> - <code>sudo reboot</code></p>\n<p>重啓後打開設置, Localisation - SetLocal - CharacterSet - GB18030 - OK</p>\n<p>之後會提示重啓 - Yes</p>\n<p>配置中文輸入法</p>\n<p>Fcitx配置 - 左下角加好 - 選擇需要的</p>\n<h2 id=\"固定-IP\"><a href=\"#固定-IP\" class=\"headerlink\" title=\"固定 IP\"></a>固定 IP</h2><pre><code>sudo nano /etc/dhcpcd.conf\n</code></pre><p>然後自己看着辦</p>\n<h2 id=\"開啓-SSH\"><a href=\"#開啓-SSH\" class=\"headerlink\" title=\"開啓 SSH\"></a>開啓 SSH</h2><p><code>sudo raspi-config</code> - <code>Interfacing Options</code> - <code>SSH</code></p>\n<h2 id=\"系統備份-還原\"><a href=\"#系統備份-還原\" class=\"headerlink\" title=\"系統備份, 還原\"></a>系統備份, 還原</h2><p>在 Windows 下可以創建一個空的<code>.img</code>資料, 然後插入存儲卡, 使用 <code>Win32 Disk Imager</code> 的 <code>Read</code> 功能. 會將整張卡進行備份.</p>\n<h2 id=\"配置代理服務\"><a href=\"#配置代理服務\" class=\"headerlink\" title=\"配置代理服務\"></a>配置代理服務</h2><h3 id=\"安裝-SS\"><a href=\"#安裝-SS\" class=\"headerlink\" title=\"安裝 SS\"></a>安裝 SS</h3><pre><code>sudo apt-get install shadowsocks\nor\nsudo pip install shadowsocks\n</code></pre><p>配置 SS 參數</p>\n<pre><code>sudo vi /etc/shadowsocks/config.json\n{\n    &quot;server&quot;: ,\n    &quot;server_port&quot;: ,\n    &quot;local_address&quot;: &quot;127.0.0.1&quot;,\n    &quot;local_port&quot;: &quot;1080&quot;,\n    &quot;password&quot;: ,\n    &quot;timeout&quot;: 300,\n    &quot;method&quot;: &quot;aes-256-cfb&quot;,\n    &quot;fast_open&quot;: false,\n    &quot;workers&quot;: 1\n}\n</code></pre><p>啓動</p>\n<pre><code>apt-get\nsudo /usr/bin/sslocal -c /etc/shadowsocks/config.json -d start\n\npip\nsudo /usr/local/bin/sslocal -c /etc/shadowsocks/config.json -d start\n</code></pre><p>開機啓動</p>\n<pre><code>su\nvim /etc/rc.local\n最後的 exit 0 的上一行添加\nsudo /usr/bin/sslocal -c /etc/shadowsocks/config.json -d start\n</code></pre><p>不同方式安裝的 sslocal 位置可能不同, <code>which sslocal</code></p>\n<h3 id=\"配置瀏覽器代理\"><a href=\"#配置瀏覽器代理\" class=\"headerlink\" title=\"配置瀏覽器代理\"></a>配置瀏覽器代理</h3><p>下載 SwitchyOmega <a href=\"https://github.com/FelisCatus/SwitchyOmega/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/FelisCatus/SwitchyOmega/releases</a> </p>\n<p>打開瀏覽器拓展頁面 chrome://extensions 并拖入</p>\n<p>若出現錯誤, 打開瀏覽器頁面右上角開發者模式, 然後解壓縮 release 的包, 瀏覽器中選擇加載已解壓的拓展</p>\n<p><strong>配置 SwitchyOmega 的方法</strong></p>\n<p>左側 proxy, 修改為 SOCKS5, 127.0.0.1, 1080</p>\n<p>auto switch, 添加規則  <a href=\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a> </p>\n<p><img src=\"http://www.phpvar.com/phpvar.com/wp-content/uploads/auto-switch-768x387.png\" alt></p>\n<h3 id=\"配置終端代理\"><a href=\"#配置終端代理\" class=\"headerlink\" title=\"配置終端代理\"></a>配置終端代理</h3><p>使用 proxychains 執行相應命令</p>\n<pre><code>sudo apt install proxychains4\nsudo vi /etc/proxychains.conf\n最後一行添加\nsocks5 127.0.0.1 1080\n并刪除多餘內容\nproxychains curl www.google.com\n</code></pre><h1 id=\"一些基本操作\"><a href=\"#一些基本操作\" class=\"headerlink\" title=\"一些基本操作\"></a>一些基本操作</h1><h2 id=\"Neofetch-顯示系統信息\"><a href=\"#Neofetch-顯示系統信息\" class=\"headerlink\" title=\"Neofetch 顯示系統信息\"></a>Neofetch 顯示系統信息</h2><pre><code>sudo apt-get install neofetch\nneofetch\n</code></pre><p>可以修改  <code>~/.config/neofetch/config.conf</code> 自定義輸出信息</p>\n<h2 id=\"獲取溫度\"><a href=\"#獲取溫度\" class=\"headerlink\" title=\"獲取溫度\"></a>獲取溫度</h2><pre><code>cd /sys/class/thermal/thermal_zone0\ncat temp\n</code></pre><p>返回值除以 1000 即為當前 CPU 溫度</p>\n<h2 id=\"設置時區\"><a href=\"#設置時區\" class=\"headerlink\" title=\"設置時區\"></a>設置時區</h2><p><code>date</code> 查詢系統時間</p>\n<pre><code>sudo dpkg-reconfigure tzdata\n\nAsia\n</code></pre><p>樹莓派由於沒有電池, 斷電後無法保存時間, 默認通過 NTP 服務獲取時間, 如果時間不準確, 可以 <code>sudo ntpd -s –d</code> 來校準</p>\n<p>也可以 <code>sudo date  --s=&quot;2018-10-19 14:54:00&quot;</code> 來設置時間</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"寫入系統到存儲卡中\"><a href=\"#寫入系統到存儲卡中\" class=\"headerlink\" title=\"寫入系統到存儲卡中\"></a>寫入系統到存儲卡中</h1><p>在通電前, 要先把系統搞定</p>\n<p>官方下載站: <a href=\"http://www.raspberrypi.org/downloads\" target=\"_blank\" rel=\"noopener\">http://www.raspberrypi.org/downloads</a></p>\n<p>格式化工具: SDFormatter</p>\n<p>寫入工具: Win32DiskImager</p>\n<p>注意寫入過程中不要點格式化</p>\n<p>默認登入名為 pi, pw: raspberry</p>\n<p>root pw: raspberry</p>\n<h1 id=\"硬體裝配\"><a href=\"#硬體裝配\" class=\"headerlink\" title=\"硬體裝配\"></a>硬體裝配</h1><p>把主板從盒子取出來</p>\n<p>插入裝有系統的存儲卡</p>\n<p>連接電源, HDMI, 網綫, 鍵鼠</p>\n<p>插入電源後即直接進入系統</p>\n<h1 id=\"系統配備\"><a href=\"#系統配備\" class=\"headerlink\" title=\"系統配備\"></a>系統配備</h1><p>以下配備均是在官方系統下操作的</p>\n<h2 id=\"root\"><a href=\"#root\" class=\"headerlink\" title=\"root\"></a>root</h2><p>由pi用戶登録後</p>\n<pre><code>sudo passwd root\n\nsudo passwd --unlock root\n</code></pre><h2 id=\"更換為國內-source\"><a href=\"#更換為國內-source\" class=\"headerlink\" title=\"更換為國內 source\"></a>更換為國內 source</h2><pre><code>sudo nano /etc/apt/sources.list \n添加\ndeb http://mirrors.aliyun.com/raspbian/raspbian/ buster main contrib non-free rpi\ndeb-src http://mirrors.aliyun.com/raspbian/raspbian/ buster main contrib non-free rpi\n更新\nsudo apt-get update\n</code></pre><h2 id=\"配置中文\"><a href=\"#配置中文\" class=\"headerlink\" title=\"配置中文\"></a>配置中文</h2><p>安裝中文字庫</p>\n<pre><code>sudo apt-get install ttf-wqy-zenhei\n</code></pre><p>輸入法</p>\n<pre><code>sudo apt-get install fcitx fcitx-googlepinyin fcitx-module-cloudpinyin fcitx-sunpinyin\n</code></pre><p>配置中文</p>\n<p><code>sudo raspi-config</code> - <code>4 Localisation</code> - <code>I1 Change Locale</code></p>\n<p>選擇 zh_CN GB2312, zh_CN.GB18030 GB18030, zh_CN.GBK GBK, zh_CN.UTF-8  UTF-8, zh_CN.UTF-8</p>\n<p><code>Enter</code> - <code>sudo reboot</code></p>\n<p>重啓後打開設置, Localisation - SetLocal - CharacterSet - GB18030 - OK</p>\n<p>之後會提示重啓 - Yes</p>\n<p>配置中文輸入法</p>\n<p>Fcitx配置 - 左下角加好 - 選擇需要的</p>\n<h2 id=\"固定-IP\"><a href=\"#固定-IP\" class=\"headerlink\" title=\"固定 IP\"></a>固定 IP</h2><pre><code>sudo nano /etc/dhcpcd.conf\n</code></pre><p>然後自己看着辦</p>\n<h2 id=\"開啓-SSH\"><a href=\"#開啓-SSH\" class=\"headerlink\" title=\"開啓 SSH\"></a>開啓 SSH</h2><p><code>sudo raspi-config</code> - <code>Interfacing Options</code> - <code>SSH</code></p>\n<h2 id=\"系統備份-還原\"><a href=\"#系統備份-還原\" class=\"headerlink\" title=\"系統備份, 還原\"></a>系統備份, 還原</h2><p>在 Windows 下可以創建一個空的<code>.img</code>資料, 然後插入存儲卡, 使用 <code>Win32 Disk Imager</code> 的 <code>Read</code> 功能. 會將整張卡進行備份.</p>\n<h2 id=\"配置代理服務\"><a href=\"#配置代理服務\" class=\"headerlink\" title=\"配置代理服務\"></a>配置代理服務</h2><h3 id=\"安裝-SS\"><a href=\"#安裝-SS\" class=\"headerlink\" title=\"安裝 SS\"></a>安裝 SS</h3><pre><code>sudo apt-get install shadowsocks\nor\nsudo pip install shadowsocks\n</code></pre><p>配置 SS 參數</p>\n<pre><code>sudo vi /etc/shadowsocks/config.json\n{\n    &quot;server&quot;: ,\n    &quot;server_port&quot;: ,\n    &quot;local_address&quot;: &quot;127.0.0.1&quot;,\n    &quot;local_port&quot;: &quot;1080&quot;,\n    &quot;password&quot;: ,\n    &quot;timeout&quot;: 300,\n    &quot;method&quot;: &quot;aes-256-cfb&quot;,\n    &quot;fast_open&quot;: false,\n    &quot;workers&quot;: 1\n}\n</code></pre><p>啓動</p>\n<pre><code>apt-get\nsudo /usr/bin/sslocal -c /etc/shadowsocks/config.json -d start\n\npip\nsudo /usr/local/bin/sslocal -c /etc/shadowsocks/config.json -d start\n</code></pre><p>開機啓動</p>\n<pre><code>su\nvim /etc/rc.local\n最後的 exit 0 的上一行添加\nsudo /usr/bin/sslocal -c /etc/shadowsocks/config.json -d start\n</code></pre><p>不同方式安裝的 sslocal 位置可能不同, <code>which sslocal</code></p>\n<h3 id=\"配置瀏覽器代理\"><a href=\"#配置瀏覽器代理\" class=\"headerlink\" title=\"配置瀏覽器代理\"></a>配置瀏覽器代理</h3><p>下載 SwitchyOmega <a href=\"https://github.com/FelisCatus/SwitchyOmega/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/FelisCatus/SwitchyOmega/releases</a> </p>\n<p>打開瀏覽器拓展頁面 chrome://extensions 并拖入</p>\n<p>若出現錯誤, 打開瀏覽器頁面右上角開發者模式, 然後解壓縮 release 的包, 瀏覽器中選擇加載已解壓的拓展</p>\n<p><strong>配置 SwitchyOmega 的方法</strong></p>\n<p>左側 proxy, 修改為 SOCKS5, 127.0.0.1, 1080</p>\n<p>auto switch, 添加規則  <a href=\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a> </p>\n<p><img src=\"http://www.phpvar.com/phpvar.com/wp-content/uploads/auto-switch-768x387.png\" alt></p>\n<h3 id=\"配置終端代理\"><a href=\"#配置終端代理\" class=\"headerlink\" title=\"配置終端代理\"></a>配置終端代理</h3><p>使用 proxychains 執行相應命令</p>\n<pre><code>sudo apt install proxychains4\nsudo vi /etc/proxychains.conf\n最後一行添加\nsocks5 127.0.0.1 1080\n并刪除多餘內容\nproxychains curl www.google.com\n</code></pre><h1 id=\"一些基本操作\"><a href=\"#一些基本操作\" class=\"headerlink\" title=\"一些基本操作\"></a>一些基本操作</h1><h2 id=\"Neofetch-顯示系統信息\"><a href=\"#Neofetch-顯示系統信息\" class=\"headerlink\" title=\"Neofetch 顯示系統信息\"></a>Neofetch 顯示系統信息</h2><pre><code>sudo apt-get install neofetch\nneofetch\n</code></pre><p>可以修改  <code>~/.config/neofetch/config.conf</code> 自定義輸出信息</p>\n<h2 id=\"獲取溫度\"><a href=\"#獲取溫度\" class=\"headerlink\" title=\"獲取溫度\"></a>獲取溫度</h2><pre><code>cd /sys/class/thermal/thermal_zone0\ncat temp\n</code></pre><p>返回值除以 1000 即為當前 CPU 溫度</p>\n<h2 id=\"設置時區\"><a href=\"#設置時區\" class=\"headerlink\" title=\"設置時區\"></a>設置時區</h2><p><code>date</code> 查詢系統時間</p>\n<pre><code>sudo dpkg-reconfigure tzdata\n\nAsia\n</code></pre><p>樹莓派由於沒有電池, 斷電後無法保存時間, 默認通過 NTP 服務獲取時間, 如果時間不準確, 可以 <code>sudo ntpd -s –d</code> 來校準</p>\n<p>也可以 <code>sudo date  --s=&quot;2018-10-19 14:54:00&quot;</code> 來設置時間</p>\n"},{"title":"使用 youtube-dl 下載影片","date":"2018-02-17T01:34:04.000Z","author":"死体菌","avatar":"https://gitee.com/IsumiAlice/IsumiPic/raw/master/2005/20200616222058.jpg","comments":1,"keywords":"youtube","description":null,"cover":"https://gitee.com/IsumiAlice/IsumiPic/raw/master///20200515204625.jpg","_content":"## youtube-dl常用命令\n得到視頻可下載格式列表：\n\n```\nyoutube-dl -F [url]\n```\n\n下載相應的視頻、音頻並合併：\n\n```\nyoutube-dl -f 299+140 xxxxxx\n```\n\n自動選擇碼率最高的視頻下載：\n\n```\nyoutube-dl -f xxxxxx\n```\n\n下載播放隊列：\n```\nyoutube-dl -f 299+140 -o \"%(playlist_index)s-%(title)s.%(ext)s\" --playlist-start 18 --playlist-end 27 PLVTne6k3-60uJC9V8o3CmGjBj8XreCcqR\n```\n\n## 安裝\n\n```\npip install --upgrade youtube-dl\n```\n\n在[官方網站](https://link.jianshu.com/?t=https%3A%2F%2Fffmpeg.org%2Fdownload.html)下載 ffmpeg，解壓縮\n\n環境變數`Path`中添加`ffmpeg\\bin`\n\n```\nffmpeg -version\n```\n\n---\n\n## VPS端(Linux)配置\n\n### 安裝 youtube-dl\n```bash\nsudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl\nsudo chmod a+rx /usr/local/bin/youtube-dl\n```\n### 安裝 ffmpeg(稍稍稍稍複雜)\n- 安裝 [yasm](http://yasm.tortall.net/Download.html)\n```bash\n$ tar -xvzf yasm-1.3.0.tar.gz\n$ cd yasm-1.3.0/\n$ ./configure\n$ make\n$ make install\n```\n- 下載[ffmpeg](http://ffmpeg.org/)源碼，並傳入VPS\n```bash\n$ tar -xjvf ffmpeg-3.3.1.tar.bz2\n$ cd ffmpeg-3.3.1/\n$ ./configure --enable-shared --prefix=/monchickey/ffmpeg\n$ make\n$ make install\n```\n- 配置一下\n```bash\n$ vi /etc/ld.so.conf.d/ffmpeg.conf\n添加 /monchickey/ffmpeg/lib 保存退出\n$ ldconfig\n$ cd /monchickey/ffmpeg/bin\n$ ./ffmpeg -version 可查看版本號\n$ vi /etc/profile\n末尾添加 export PATH=\"/monchickey/ffmpeg/bin:$PATH\" 保存退出\n$ source /etc/profile\n```\n\n## 本地下載VPS上的文件\n- 在VPS上開啟臨時HTTP服務器\n```bash\n$ python -m SimpleHTTPServer\n```\n- 本地瀏覽器打開 ``IP:8000``\n- OK了，用瀏覽器愉快的下載相應文件吧\n- CTRL+C可關閉服務器\n- 也可以``netstat -anp | grep 8000``查找相應進程如``3333/python``,然後通過``kill -9 3333``關閉進程\n","source":"_posts/youtube-dl.md","raw":"---\ntitle: 使用 youtube-dl 下載影片\ndate: 2018-02-17 09:34:04\nauthor: 死体菌\navatar: https://gitee.com/IsumiAlice/IsumiPic/raw/master/2005/20200616222058.jpg\ncategories: 技術\ncomments: true\ntags: \n - 計算機\nkeywords: youtube\ndescription:\ncover:  https://gitee.com/IsumiAlice/IsumiPic/raw/master///20200515204625.jpg\n---\n## youtube-dl常用命令\n得到視頻可下載格式列表：\n\n```\nyoutube-dl -F [url]\n```\n\n下載相應的視頻、音頻並合併：\n\n```\nyoutube-dl -f 299+140 xxxxxx\n```\n\n自動選擇碼率最高的視頻下載：\n\n```\nyoutube-dl -f xxxxxx\n```\n\n下載播放隊列：\n```\nyoutube-dl -f 299+140 -o \"%(playlist_index)s-%(title)s.%(ext)s\" --playlist-start 18 --playlist-end 27 PLVTne6k3-60uJC9V8o3CmGjBj8XreCcqR\n```\n\n## 安裝\n\n```\npip install --upgrade youtube-dl\n```\n\n在[官方網站](https://link.jianshu.com/?t=https%3A%2F%2Fffmpeg.org%2Fdownload.html)下載 ffmpeg，解壓縮\n\n環境變數`Path`中添加`ffmpeg\\bin`\n\n```\nffmpeg -version\n```\n\n---\n\n## VPS端(Linux)配置\n\n### 安裝 youtube-dl\n```bash\nsudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl\nsudo chmod a+rx /usr/local/bin/youtube-dl\n```\n### 安裝 ffmpeg(稍稍稍稍複雜)\n- 安裝 [yasm](http://yasm.tortall.net/Download.html)\n```bash\n$ tar -xvzf yasm-1.3.0.tar.gz\n$ cd yasm-1.3.0/\n$ ./configure\n$ make\n$ make install\n```\n- 下載[ffmpeg](http://ffmpeg.org/)源碼，並傳入VPS\n```bash\n$ tar -xjvf ffmpeg-3.3.1.tar.bz2\n$ cd ffmpeg-3.3.1/\n$ ./configure --enable-shared --prefix=/monchickey/ffmpeg\n$ make\n$ make install\n```\n- 配置一下\n```bash\n$ vi /etc/ld.so.conf.d/ffmpeg.conf\n添加 /monchickey/ffmpeg/lib 保存退出\n$ ldconfig\n$ cd /monchickey/ffmpeg/bin\n$ ./ffmpeg -version 可查看版本號\n$ vi /etc/profile\n末尾添加 export PATH=\"/monchickey/ffmpeg/bin:$PATH\" 保存退出\n$ source /etc/profile\n```\n\n## 本地下載VPS上的文件\n- 在VPS上開啟臨時HTTP服務器\n```bash\n$ python -m SimpleHTTPServer\n```\n- 本地瀏覽器打開 ``IP:8000``\n- OK了，用瀏覽器愉快的下載相應文件吧\n- CTRL+C可關閉服務器\n- 也可以``netstat -anp | grep 8000``查找相應進程如``3333/python``,然後通過``kill -9 3333``關閉進程\n","slug":"youtube-dl","published":1,"updated":"2020-08-18T15:20:26.636Z","_id":"cke03cgp4000ar4k2qal5s02z","layout":"post","photos":[],"link":"","content":"<h2 id=\"youtube-dl常用命令\"><a href=\"#youtube-dl常用命令\" class=\"headerlink\" title=\"youtube-dl常用命令\"></a>youtube-dl常用命令</h2><p>得到視頻可下載格式列表：</p>\n<pre><code>youtube-dl -F [url]\n</code></pre><p>下載相應的視頻、音頻並合併：</p>\n<pre><code>youtube-dl -f 299+140 xxxxxx\n</code></pre><p>自動選擇碼率最高的視頻下載：</p>\n<pre><code>youtube-dl -f xxxxxx\n</code></pre><p>下載播放隊列：</p>\n<pre><code>youtube-dl -f 299+140 -o &quot;%(playlist_index)s-%(title)s.%(ext)s&quot; --playlist-start 18 --playlist-end 27 PLVTne6k3-60uJC9V8o3CmGjBj8XreCcqR\n</code></pre><h2 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h2><pre><code>pip install --upgrade youtube-dl\n</code></pre><p>在<a href=\"https://link.jianshu.com/?t=https%3A%2F%2Fffmpeg.org%2Fdownload.html\" target=\"_blank\" rel=\"noopener\">官方網站</a>下載 ffmpeg，解壓縮</p>\n<p>環境變數<code>Path</code>中添加<code>ffmpeg\\bin</code></p>\n<pre><code>ffmpeg -version\n</code></pre><hr>\n<h2 id=\"VPS端-Linux-配置\"><a href=\"#VPS端-Linux-配置\" class=\"headerlink\" title=\"VPS端(Linux)配置\"></a>VPS端(Linux)配置</h2><h3 id=\"安裝-youtube-dl\"><a href=\"#安裝-youtube-dl\" class=\"headerlink\" title=\"安裝 youtube-dl\"></a>安裝 youtube-dl</h3><pre><code class=\"bash\">sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl\nsudo chmod a+rx /usr/local/bin/youtube-dl\n</code></pre>\n<h3 id=\"安裝-ffmpeg-稍稍稍稍複雜\"><a href=\"#安裝-ffmpeg-稍稍稍稍複雜\" class=\"headerlink\" title=\"安裝 ffmpeg(稍稍稍稍複雜)\"></a>安裝 ffmpeg(稍稍稍稍複雜)</h3><ul>\n<li>安裝 <a href=\"http://yasm.tortall.net/Download.html\" target=\"_blank\" rel=\"noopener\">yasm</a><pre><code class=\"bash\">$ tar -xvzf yasm-1.3.0.tar.gz\n$ cd yasm-1.3.0/\n$ ./configure\n$ make\n$ make install\n</code></pre>\n</li>\n<li>下載<a href=\"http://ffmpeg.org/\" target=\"_blank\" rel=\"noopener\">ffmpeg</a>源碼，並傳入VPS<pre><code class=\"bash\">$ tar -xjvf ffmpeg-3.3.1.tar.bz2\n$ cd ffmpeg-3.3.1/\n$ ./configure --enable-shared --prefix=/monchickey/ffmpeg\n$ make\n$ make install\n</code></pre>\n</li>\n<li>配置一下<pre><code class=\"bash\">$ vi /etc/ld.so.conf.d/ffmpeg.conf\n添加 /monchickey/ffmpeg/lib 保存退出\n$ ldconfig\n$ cd /monchickey/ffmpeg/bin\n$ ./ffmpeg -version 可查看版本號\n$ vi /etc/profile\n末尾添加 export PATH=&quot;/monchickey/ffmpeg/bin:$PATH&quot; 保存退出\n$ source /etc/profile\n</code></pre>\n</li>\n</ul>\n<h2 id=\"本地下載VPS上的文件\"><a href=\"#本地下載VPS上的文件\" class=\"headerlink\" title=\"本地下載VPS上的文件\"></a>本地下載VPS上的文件</h2><ul>\n<li>在VPS上開啟臨時HTTP服務器<pre><code class=\"bash\">$ python -m SimpleHTTPServer\n</code></pre>\n</li>\n<li>本地瀏覽器打開 <code>IP:8000</code></li>\n<li>OK了，用瀏覽器愉快的下載相應文件吧</li>\n<li>CTRL+C可關閉服務器</li>\n<li>也可以<code>netstat -anp | grep 8000</code>查找相應進程如<code>3333/python</code>,然後通過<code>kill -9 3333</code>關閉進程</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"youtube-dl常用命令\"><a href=\"#youtube-dl常用命令\" class=\"headerlink\" title=\"youtube-dl常用命令\"></a>youtube-dl常用命令</h2><p>得到視頻可下載格式列表：</p>\n<pre><code>youtube-dl -F [url]\n</code></pre><p>下載相應的視頻、音頻並合併：</p>\n<pre><code>youtube-dl -f 299+140 xxxxxx\n</code></pre><p>自動選擇碼率最高的視頻下載：</p>\n<pre><code>youtube-dl -f xxxxxx\n</code></pre><p>下載播放隊列：</p>\n<pre><code>youtube-dl -f 299+140 -o &quot;%(playlist_index)s-%(title)s.%(ext)s&quot; --playlist-start 18 --playlist-end 27 PLVTne6k3-60uJC9V8o3CmGjBj8XreCcqR\n</code></pre><h2 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h2><pre><code>pip install --upgrade youtube-dl\n</code></pre><p>在<a href=\"https://link.jianshu.com/?t=https%3A%2F%2Fffmpeg.org%2Fdownload.html\" target=\"_blank\" rel=\"noopener\">官方網站</a>下載 ffmpeg，解壓縮</p>\n<p>環境變數<code>Path</code>中添加<code>ffmpeg\\bin</code></p>\n<pre><code>ffmpeg -version\n</code></pre><hr>\n<h2 id=\"VPS端-Linux-配置\"><a href=\"#VPS端-Linux-配置\" class=\"headerlink\" title=\"VPS端(Linux)配置\"></a>VPS端(Linux)配置</h2><h3 id=\"安裝-youtube-dl\"><a href=\"#安裝-youtube-dl\" class=\"headerlink\" title=\"安裝 youtube-dl\"></a>安裝 youtube-dl</h3><pre><code class=\"bash\">sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl\nsudo chmod a+rx /usr/local/bin/youtube-dl\n</code></pre>\n<h3 id=\"安裝-ffmpeg-稍稍稍稍複雜\"><a href=\"#安裝-ffmpeg-稍稍稍稍複雜\" class=\"headerlink\" title=\"安裝 ffmpeg(稍稍稍稍複雜)\"></a>安裝 ffmpeg(稍稍稍稍複雜)</h3><ul>\n<li>安裝 <a href=\"http://yasm.tortall.net/Download.html\" target=\"_blank\" rel=\"noopener\">yasm</a><pre><code class=\"bash\">$ tar -xvzf yasm-1.3.0.tar.gz\n$ cd yasm-1.3.0/\n$ ./configure\n$ make\n$ make install\n</code></pre>\n</li>\n<li>下載<a href=\"http://ffmpeg.org/\" target=\"_blank\" rel=\"noopener\">ffmpeg</a>源碼，並傳入VPS<pre><code class=\"bash\">$ tar -xjvf ffmpeg-3.3.1.tar.bz2\n$ cd ffmpeg-3.3.1/\n$ ./configure --enable-shared --prefix=/monchickey/ffmpeg\n$ make\n$ make install\n</code></pre>\n</li>\n<li>配置一下<pre><code class=\"bash\">$ vi /etc/ld.so.conf.d/ffmpeg.conf\n添加 /monchickey/ffmpeg/lib 保存退出\n$ ldconfig\n$ cd /monchickey/ffmpeg/bin\n$ ./ffmpeg -version 可查看版本號\n$ vi /etc/profile\n末尾添加 export PATH=&quot;/monchickey/ffmpeg/bin:$PATH&quot; 保存退出\n$ source /etc/profile\n</code></pre>\n</li>\n</ul>\n<h2 id=\"本地下載VPS上的文件\"><a href=\"#本地下載VPS上的文件\" class=\"headerlink\" title=\"本地下載VPS上的文件\"></a>本地下載VPS上的文件</h2><ul>\n<li>在VPS上開啟臨時HTTP服務器<pre><code class=\"bash\">$ python -m SimpleHTTPServer\n</code></pre>\n</li>\n<li>本地瀏覽器打開 <code>IP:8000</code></li>\n<li>OK了，用瀏覽器愉快的下載相應文件吧</li>\n<li>CTRL+C可關閉服務器</li>\n<li>也可以<code>netstat -anp | grep 8000</code>查找相應進程如<code>3333/python</code>,然後通過<code>kill -9 3333</code>關閉進程</li>\n</ul>\n"},{"title":"使用 Windows 時經常遇到的問題","date":"2020-03-10T14:50:37.000Z","author":"死体菌","avatar":"https://gitee.com/IsumiAlice/IsumiPic/raw/master/2005/20200616222058.jpg","comments":1,"keywords":"Windows","description":"使用 Windows 時經常遇到的問題","cover":"https://gitee.com/IsumiAlice/IsumiPic/raw/master///20200515204625.jpg","_content":"## 更換主機板\n\n如果拆不下散熱器和主機板的螺絲，就用力一點！！！  \n主機板的電源綫要插牢固\n\n## OneDrive 右鍵釋放空間\n\n簡單的方法可以把使用者賬戶控制設為預設值\n![](https://raw.githubusercontent.com/IsumiAlice/IsumiPic/master/20200422002908.jpg)\n\n如果上面的方法失敗：\n1. win+r -> gpedit.msc 打開本機群組原則編輯器\n2. ![](https://raw.githubusercontent.com/IsumiAlice/IsumiPic/master/20200422002548.jpg)\n3. 重啓\n\n## 更換主硬盤遷移系統\n\nPartAssist.exe，很好用\n\n## 睡眠問題\n\n睡眠後螢幕關閉，但滑鼠亮著，機箱風扇也在工作\n\n解決方法：把登録編輯程式的 AwayModeEnable 設定為 0\n\n位置在：電腦\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Power\n\n## 如果Windows無法安裝到指定磁盤\n\n1. shift+F10\n2. diskpart\n3. list disk\n4. select disk \n5. Clean\n6. 若需要 convert mbr\n\n## 卓越性能模式\n管理員運行 Windows Powershell  \n```bash\npowercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61\n```\n\n## 應用程式自啓動\n\n windows - 執行(run) - shell:startup - 確定 - 將要開機啓動的程式捷徑放入即可 \n\n## 禁用筆電自帶的鍵盤\n\n1. 設備管理器\n2. 鍵盤-PS/2\n3. 右鍵-更新驅動\n4. 瀏覽計算機查找驅動\n5. 從計算機的驅動列表選擇\n6. 取消選擇-顯示兼容硬體\n7. 隨便選一個其他品牌驅動\n8. 是-重啓","source":"_posts/Windows-puu.md","raw":"---\ntitle: 使用 Windows 時經常遇到的問題\ndate: 2020-03-10 22:50:37\nauthor: 死体菌\navatar: https://gitee.com/IsumiAlice/IsumiPic/raw/master/2005/20200616222058.jpg\ncategories: 技術\ncomments: true\ntags: \n - 計算機\nkeywords: Windows\ndescription: 使用 Windows 時經常遇到的問題\ncover:  https://gitee.com/IsumiAlice/IsumiPic/raw/master///20200515204625.jpg\n---\n## 更換主機板\n\n如果拆不下散熱器和主機板的螺絲，就用力一點！！！  \n主機板的電源綫要插牢固\n\n## OneDrive 右鍵釋放空間\n\n簡單的方法可以把使用者賬戶控制設為預設值\n![](https://raw.githubusercontent.com/IsumiAlice/IsumiPic/master/20200422002908.jpg)\n\n如果上面的方法失敗：\n1. win+r -> gpedit.msc 打開本機群組原則編輯器\n2. ![](https://raw.githubusercontent.com/IsumiAlice/IsumiPic/master/20200422002548.jpg)\n3. 重啓\n\n## 更換主硬盤遷移系統\n\nPartAssist.exe，很好用\n\n## 睡眠問題\n\n睡眠後螢幕關閉，但滑鼠亮著，機箱風扇也在工作\n\n解決方法：把登録編輯程式的 AwayModeEnable 設定為 0\n\n位置在：電腦\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Power\n\n## 如果Windows無法安裝到指定磁盤\n\n1. shift+F10\n2. diskpart\n3. list disk\n4. select disk \n5. Clean\n6. 若需要 convert mbr\n\n## 卓越性能模式\n管理員運行 Windows Powershell  \n```bash\npowercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61\n```\n\n## 應用程式自啓動\n\n windows - 執行(run) - shell:startup - 確定 - 將要開機啓動的程式捷徑放入即可 \n\n## 禁用筆電自帶的鍵盤\n\n1. 設備管理器\n2. 鍵盤-PS/2\n3. 右鍵-更新驅動\n4. 瀏覽計算機查找驅動\n5. 從計算機的驅動列表選擇\n6. 取消選擇-顯示兼容硬體\n7. 隨便選一個其他品牌驅動\n8. 是-重啓","slug":"Windows-puu","published":1,"updated":"2020-08-18T15:20:22.592Z","_id":"cke03cgp7000er4k2xabsqt17","layout":"post","photos":[],"link":"","content":"<h2 id=\"更換主機板\"><a href=\"#更換主機板\" class=\"headerlink\" title=\"更換主機板\"></a>更換主機板</h2><p>如果拆不下散熱器和主機板的螺絲，就用力一點！！！<br>主機板的電源綫要插牢固</p>\n<h2 id=\"OneDrive-右鍵釋放空間\"><a href=\"#OneDrive-右鍵釋放空間\" class=\"headerlink\" title=\"OneDrive 右鍵釋放空間\"></a>OneDrive 右鍵釋放空間</h2><p>簡單的方法可以把使用者賬戶控制設為預設值<br><img src=\"https://raw.githubusercontent.com/IsumiAlice/IsumiPic/master/20200422002908.jpg\" alt></p>\n<p>如果上面的方法失敗：</p>\n<ol>\n<li>win+r -&gt; gpedit.msc 打開本機群組原則編輯器</li>\n<li><img src=\"https://raw.githubusercontent.com/IsumiAlice/IsumiPic/master/20200422002548.jpg\" alt></li>\n<li>重啓</li>\n</ol>\n<h2 id=\"更換主硬盤遷移系統\"><a href=\"#更換主硬盤遷移系統\" class=\"headerlink\" title=\"更換主硬盤遷移系統\"></a>更換主硬盤遷移系統</h2><p>PartAssist.exe，很好用</p>\n<h2 id=\"睡眠問題\"><a href=\"#睡眠問題\" class=\"headerlink\" title=\"睡眠問題\"></a>睡眠問題</h2><p>睡眠後螢幕關閉，但滑鼠亮著，機箱風扇也在工作</p>\n<p>解決方法：把登録編輯程式的 AwayModeEnable 設定為 0</p>\n<p>位置在：電腦\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Power</p>\n<h2 id=\"如果Windows無法安裝到指定磁盤\"><a href=\"#如果Windows無法安裝到指定磁盤\" class=\"headerlink\" title=\"如果Windows無法安裝到指定磁盤\"></a>如果Windows無法安裝到指定磁盤</h2><ol>\n<li>shift+F10</li>\n<li>diskpart</li>\n<li>list disk</li>\n<li>select disk </li>\n<li>Clean</li>\n<li>若需要 convert mbr</li>\n</ol>\n<h2 id=\"卓越性能模式\"><a href=\"#卓越性能模式\" class=\"headerlink\" title=\"卓越性能模式\"></a>卓越性能模式</h2><p>管理員運行 Windows Powershell  </p>\n<pre><code class=\"bash\">powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61\n</code></pre>\n<h2 id=\"應用程式自啓動\"><a href=\"#應用程式自啓動\" class=\"headerlink\" title=\"應用程式自啓動\"></a>應用程式自啓動</h2><p> windows - 執行(run) - shell:startup - 確定 - 將要開機啓動的程式捷徑放入即可 </p>\n<h2 id=\"禁用筆電自帶的鍵盤\"><a href=\"#禁用筆電自帶的鍵盤\" class=\"headerlink\" title=\"禁用筆電自帶的鍵盤\"></a>禁用筆電自帶的鍵盤</h2><ol>\n<li>設備管理器</li>\n<li>鍵盤-PS/2</li>\n<li>右鍵-更新驅動</li>\n<li>瀏覽計算機查找驅動</li>\n<li>從計算機的驅動列表選擇</li>\n<li>取消選擇-顯示兼容硬體</li>\n<li>隨便選一個其他品牌驅動</li>\n<li>是-重啓</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"更換主機板\"><a href=\"#更換主機板\" class=\"headerlink\" title=\"更換主機板\"></a>更換主機板</h2><p>如果拆不下散熱器和主機板的螺絲，就用力一點！！！<br>主機板的電源綫要插牢固</p>\n<h2 id=\"OneDrive-右鍵釋放空間\"><a href=\"#OneDrive-右鍵釋放空間\" class=\"headerlink\" title=\"OneDrive 右鍵釋放空間\"></a>OneDrive 右鍵釋放空間</h2><p>簡單的方法可以把使用者賬戶控制設為預設值<br><img src=\"https://raw.githubusercontent.com/IsumiAlice/IsumiPic/master/20200422002908.jpg\" alt></p>\n<p>如果上面的方法失敗：</p>\n<ol>\n<li>win+r -&gt; gpedit.msc 打開本機群組原則編輯器</li>\n<li><img src=\"https://raw.githubusercontent.com/IsumiAlice/IsumiPic/master/20200422002548.jpg\" alt></li>\n<li>重啓</li>\n</ol>\n<h2 id=\"更換主硬盤遷移系統\"><a href=\"#更換主硬盤遷移系統\" class=\"headerlink\" title=\"更換主硬盤遷移系統\"></a>更換主硬盤遷移系統</h2><p>PartAssist.exe，很好用</p>\n<h2 id=\"睡眠問題\"><a href=\"#睡眠問題\" class=\"headerlink\" title=\"睡眠問題\"></a>睡眠問題</h2><p>睡眠後螢幕關閉，但滑鼠亮著，機箱風扇也在工作</p>\n<p>解決方法：把登録編輯程式的 AwayModeEnable 設定為 0</p>\n<p>位置在：電腦\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Power</p>\n<h2 id=\"如果Windows無法安裝到指定磁盤\"><a href=\"#如果Windows無法安裝到指定磁盤\" class=\"headerlink\" title=\"如果Windows無法安裝到指定磁盤\"></a>如果Windows無法安裝到指定磁盤</h2><ol>\n<li>shift+F10</li>\n<li>diskpart</li>\n<li>list disk</li>\n<li>select disk </li>\n<li>Clean</li>\n<li>若需要 convert mbr</li>\n</ol>\n<h2 id=\"卓越性能模式\"><a href=\"#卓越性能模式\" class=\"headerlink\" title=\"卓越性能模式\"></a>卓越性能模式</h2><p>管理員運行 Windows Powershell  </p>\n<pre><code class=\"bash\">powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61\n</code></pre>\n<h2 id=\"應用程式自啓動\"><a href=\"#應用程式自啓動\" class=\"headerlink\" title=\"應用程式自啓動\"></a>應用程式自啓動</h2><p> windows - 執行(run) - shell:startup - 確定 - 將要開機啓動的程式捷徑放入即可 </p>\n<h2 id=\"禁用筆電自帶的鍵盤\"><a href=\"#禁用筆電自帶的鍵盤\" class=\"headerlink\" title=\"禁用筆電自帶的鍵盤\"></a>禁用筆電自帶的鍵盤</h2><ol>\n<li>設備管理器</li>\n<li>鍵盤-PS/2</li>\n<li>右鍵-更新驅動</li>\n<li>瀏覽計算機查找驅動</li>\n<li>從計算機的驅動列表選擇</li>\n<li>取消選擇-顯示兼容硬體</li>\n<li>隨便選一個其他品牌驅動</li>\n<li>是-重啓</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cke03cgoy0005r4k21j1m43tc","category_id":"cke03cgou0002r4k29v40l8b6","_id":"cke03cgp5000br4k2180owugq"},{"post_id":"cke03cgon0000r4k26icwm9ey","category_id":"cke03cgou0002r4k29v40l8b6","_id":"cke03cgp9000fr4k26am7av8j"},{"post_id":"cke03cgoz0006r4k24lfvq2l9","category_id":"cke03cgou0002r4k29v40l8b6","_id":"cke03cgpa000hr4k2dzlat5el"},{"post_id":"cke03cgp20009r4k28v0lrvpn","category_id":"cke03cgou0002r4k29v40l8b6","_id":"cke03cgpb000kr4k2zgvwjnls"},{"post_id":"cke03cgor0001r4k224nn8945","category_id":"cke03cgou0002r4k29v40l8b6","_id":"cke03cgpb000mr4k21vdgnr98"},{"post_id":"cke03cgp4000ar4k2qal5s02z","category_id":"cke03cgou0002r4k29v40l8b6","_id":"cke03cgpc000or4k28cktx661"},{"post_id":"cke03cgp7000er4k2xabsqt17","category_id":"cke03cgou0002r4k29v40l8b6","_id":"cke03cgpc000qr4k2vbwlphtr"},{"post_id":"cke03cgow0004r4k2riyfs3ka","category_id":"cke03cgou0002r4k29v40l8b6","_id":"cke03cgpc000rr4k2f1nneuvv"}],"PostTag":[{"post_id":"cke03cgon0000r4k26icwm9ey","tag_id":"cke03cgow0003r4k2vlg893j4","_id":"cke03cgp9000gr4k2tfo5zyv4"},{"post_id":"cke03cgon0000r4k26icwm9ey","tag_id":"cke03cgp10008r4k2e9wrtst6","_id":"cke03cgpa000ir4k2txq3annk"},{"post_id":"cke03cgor0001r4k224nn8945","tag_id":"cke03cgp6000dr4k2efmbgl7n","_id":"cke03cgpb000lr4k28qwfzw1t"},{"post_id":"cke03cgow0004r4k2riyfs3ka","tag_id":"cke03cgpa000jr4k2m4274q6s","_id":"cke03cgpc000pr4k2cd1qr71c"},{"post_id":"cke03cgoz0006r4k24lfvq2l9","tag_id":"cke03cgpb000nr4k2nc9rbegt","_id":"cke03cgpd000tr4k21szxl1lq"},{"post_id":"cke03cgp20009r4k28v0lrvpn","tag_id":"cke03cgp6000dr4k2efmbgl7n","_id":"cke03cgpe000wr4k2z362y6yd"},{"post_id":"cke03cgp20009r4k28v0lrvpn","tag_id":"cke03cgpd000ur4k23ue03pb4","_id":"cke03cgpf000xr4k236rro1fo"},{"post_id":"cke03cgp4000ar4k2qal5s02z","tag_id":"cke03cgpd000ur4k23ue03pb4","_id":"cke03cgpf000zr4k20n67iqac"},{"post_id":"cke03cgp7000er4k2xabsqt17","tag_id":"cke03cgpd000ur4k23ue03pb4","_id":"cke03cgpg0010r4k2xz9wl7ep"}],"Tag":[{"name":"數學","_id":"cke03cgow0003r4k2vlg893j4"},{"name":"高效能運算","_id":"cke03cgp10008r4k2e9wrtst6"},{"name":"樹莓派","_id":"cke03cgp6000dr4k2efmbgl7n"},{"name":"遊戲","_id":"cke03cgpa000jr4k2m4274q6s"},{"name":"web","_id":"cke03cgpb000nr4k2nc9rbegt"},{"name":"計算機","_id":"cke03cgpd000ur4k23ue03pb4"}]}}